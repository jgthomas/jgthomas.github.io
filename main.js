/*! For license information please see main.js.LICENSE.txt */
(()=>{var n={424:(n,e,t)=>{"use strict";t.d(e,{Z:()=>A});var i=t(15),r=t.n(i),o=t(645),a=t.n(o)()(r());a.push([n.id,"html,\nbody {\n  margin: 0;\n  padding: 0;\n  font-size: 16px;\n  font-family: 'Chivo', sans-serif;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: cornflowerblue;\n  color: whitesmoke;\n}\n\n.full-width {\n  width: 65%;\n  margin: auto;\n  margin-top: 0;\n  background-color: whitesmoke;\n  color: dodgerblue;\n  border-radius: 0 0 2% 2%;\n  padding: 1%;\n  margin-bottom: 2%;\n  font-weight: 400;\n}\n\nnav {\n  text-align: center;\n  margin-top: 2em;\n}\n\n.section-link {\n  text-decoration: none;\n  outline: none;\n  color: dimgrey;\n  padding: 1%;\n}\n\n.search-form {\n  display: flex;\n  flex-direction: column;\n  align-content: space-around;\n  width: 90%;\n  height: auto;\n  margin: auto;\n  text-align: center;\n}\n\n#search-bar {\n  width: 50%;\n  padding: 20px;\n  font-size: 1.15em;\n  margin: auto;\n  display: block;\n  margin-bottom: 1.15em;\n  color: cornflowerblue;\n  border-radius: 2%;\n  border: none;\n  text-decoration: none;\n}\n\n.clear-button {\n  text-decoration: none;\n  padding: 5px;\n  font-size: large;\n  border: none;\n  color: tomato;\n  background-color: whitesmoke;\n  -webkit-appearance: none;\n  border-radius: 5px;\n  margin: auto;\n}\n\n.hidden {\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n}\n\n.heading {\n  text-align: center;\n  font-weight: 400;\n}\n\n.tagline {\n  text-align: center;\n  font-style: italic;\n  font-weight: 400;\n  font-size: 1em;\n  color: slategrey;\n}\n\n.main-grid {\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr;\n  grid-row-gap: 1%;\n  grid-template-areas:\n    'projects'\n    'key';\n}\n\n.project-grid {\n  display: grid;\n  grid-area: projects;\n  grid-template-columns: 1fr 1fr;\n  grid-column-gap: 1%;\n  align-items: center;\n  justify-items: center;\n  justify-content: space-evenly;\n  width: 80%;\n  margin: auto;\n  text-align: center;\n  margin-bottom: 1em;\n}\n\n.key-grid {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  color: darkslategrey;\n}\n\n.project {\n  display: grid;\n  grid-template-columns: 1fr;\n  background-color: whitesmoke;\n  color: cornflowerblue;\n  border-radius: 2%;\n  min-width: 95%;\n  max-width: 95%;\n  margin-top: 20px;\n  align-self: stretch;\n}\n\n.description {\n  color: dimgrey;\n  width: 80%;\n  font-size: larger;\n  margin: auto;\n}\n\n.detail {\n  font-size: 90%;\n}\n\n.tech-used {\n  color: dimgrey;\n  width: 70%;\n  margin: auto;\n  text-align: left;\n  font-size: 100%;\n  font-weight: 400;\n}\n\n.status-line {\n  align-self: end;\n  color: darkslategrey;\n  font-size: large;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n}\n\n.link-image {\n  width: 26px;\n}\n\n.uses-title {\n  color: cornflowerblue;\n}\n\n.feature-list {\n  width: 50%;\n  margin: auto;\n  text-align: left;\n  font-size: 90%;\n}\n\n.project-image {\n  max-width: 50%;\n  height: auto;\n  padding: 20px;\n  margin: auto;\n}\n\n.profile-text {\n  color: dimgrey;\n  min-width: 70%;\n  max-width: 70%;\n  margin: auto;\n}\n\n.lang-intro {\n  margin-bottom: 3em;\n}\n\n.lang {\n  margin-bottom: 2.5em;\n}\n\n.tool-icon-list {\n  text-align: center;\n}\n\n.tool-icon {\n  display: inline-block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.active {\n  color: #2dc937;\n}\n\n.archived {\n  color: #e7b416;\n}\n\n.retired {\n  color: darkgray;\n}\n\n.me-links {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n}\n\n/*\n ##Device = absurdly large monitors\n*/\n@media only screen and (min-width: 2450px) {\n  .project-grid {\n    min-width: 50%;\n    max-width: 50%;\n  }\n  .full-width {\n    width: 45%;\n  }\n  .profile-text {\n    min-width: 60%;\n    max-width: 60%;\n  }\n}\n\n/*\n ##Device = Desktops\n  ##Screen = 1281px to higher resolution desktops\n*/\n@media (min-width: 1281px) {\n  .profile-text {\n    min-width: 60%;\n    max-width: 60%;\n  }\n}\n\n/*\n  ##Device = Laptops, Desktops\n  ##Screen = B/w 1025px to 1280px\n*/\n@media (min-width: 1025px) and (max-width: 1280px) {\n  .project-grid {\n    min-width: 95%;\n    max-width: 95%;\n  }\n  .full-width {\n    width: 90%;\n  }\n  .profile-text {\n    min-width: 60%;\n    max-width: 60%;\n  }\n}\n\n/*\n  ##Device = Tablets, Ipads (portrait)\n  ##Screen = B/w 768px to 1024px\n*/\n@media (min-width: 768px) and (max-width: 1024px) {\n  .project-grid {\n    min-width: 95%;\n    max-width: 95%;\n    grid-template-columns: 1fr;\n  }\n  .project {\n    min-width: 80%;\n    max-width: 80%;\n  }\n  .full-width {\n    width: 75%;\n  }\n}\n\n/*\n  ##Device = Tablets, Ipads (landscape)\n  ##Screen = B/w 768px to 1024px\n*/\n@media (min-width: 768px) and (max-width: 1024px) and (orientation: landscape) {\n  .project-grid {\n    min-width: 95%;\n    max-width: 95%;\n    grid-template-columns: 1fr;\n  }\n  .full-width {\n    width: 90%;\n  }\n  .feature-list {\n    width: 80%;\n  }\n}\n\n/*\n  ##Device = Low Resolution Tablets, Mobiles (Landscape)\n  ##Screen = B/w 481px to 767px\n*/\n@media (min-width: 481px) and (max-width: 767px) {\n  .project-grid {\n    min-width: 100%;\n    max-width: 100%;\n    grid-template-columns: 1fr;\n  }\n  .project {\n    min-width: 95%;\n    max-width: 95%;\n  }\n  .full-width {\n    width: 95%;\n  }\n  .feature-list {\n    width: 70%;\n  }\n}\n\n/*\n  ##Device = Most of the Smartphones Mobiles (Portrait)\n  ##Screen = B/w 320px to 479px\n*/\n@media (min-width: 320px) and (max-width: 480px) {\n  .project-grid {\n    min-width: 100%;\n    max-width: 100%;\n    grid-template-columns: 1fr;\n  }\n  .project {\n    min-width: 95%;\n    max-width: 95%;\n  }\n  .full-width {\n    width: 95%;\n  }\n  .feature-list {\n    width: 70%;\n  }\n  #search-bar {\n    width: 75%;\n    margin-top: 1em;\n  }\n}\n\n/*\n ##Device = very small phones\n */\n@media (min-width: 320px) and (max-width: 401px) {\n  .project-grid {\n    min-width: 100%;\n    max-width: 100%;\n    grid-template-columns: 1fr;\n  }\n  .project {\n    min-width: 90%;\n    max-width: 90%;\n  }\n  .full-width {\n    width: 90%;\n  }\n  .feature-list {\n    width: 80%;\n  }\n  #search-bar {\n    width: 75%;\n    margin-top: 1em;\n  }\n}\n\n@media (hover: hover) {\n  .section-link:hover {\n    color: dodgerblue;\n  }\n}\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;;EAEE,SAAS;EACT,UAAU;EACV,eAAe;EACf,gCAAgC;EAChC,0CAA0C;EAC1C,gCAAgC;EAChC,iBAAiB;AACnB;;AAEA;EACE,UAAU;EACV,YAAY;EACZ,aAAa;EACb,4BAA4B;EAC5B,iBAAiB;EACjB,wBAAwB;EACxB,WAAW;EACX,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,qBAAqB;EACrB,aAAa;EACb,cAAc;EACd,WAAW;AACb;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,2BAA2B;EAC3B,UAAU;EACV,YAAY;EACZ,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,UAAU;EACV,aAAa;EACb,iBAAiB;EACjB,YAAY;EACZ,cAAc;EACd,qBAAqB;EACrB,qBAAqB;EACrB,iBAAiB;EACjB,YAAY;EACZ,qBAAqB;AACvB;;AAEA;EACE,qBAAqB;EACrB,YAAY;EACZ,gBAAgB;EAChB,YAAY;EACZ,aAAa;EACb,4BAA4B;EAC5B,wBAAwB;EACxB,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,mBAAmB;EACnB,WAAW;EACX,UAAU;EACV,YAAY;EACZ,UAAU;EACV,SAAS;AACX;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,cAAc;EACd,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,0BAA0B;EAC1B,uBAAuB;EACvB,gBAAgB;EAChB;;SAEO;AACT;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,8BAA8B;EAC9B,mBAAmB;EACnB,mBAAmB;EACnB,qBAAqB;EACrB,6BAA6B;EAC7B,UAAU;EACV,YAAY;EACZ,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,6BAA6B;EAC7B,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,0BAA0B;EAC1B,4BAA4B;EAC5B,qBAAqB;EACrB,iBAAiB;EACjB,cAAc;EACd,cAAc;EACd,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,cAAc;EACd,UAAU;EACV,iBAAiB;EACjB,YAAY;AACd;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;EACd,UAAU;EACV,YAAY;EACZ,gBAAgB;EAChB,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,oBAAoB;EACpB,gBAAgB;EAChB,gBAAgB;EAChB,aAAa;EACb,mBAAmB;EACnB,6BAA6B;AAC/B;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,UAAU;EACV,YAAY;EACZ,gBAAgB;EAChB,cAAc;AAChB;;AAEA;EACE,cAAc;EACd,YAAY;EACZ,aAAa;EACb,YAAY;AACd;;AAEA;EACE,cAAc;EACd,cAAc;EACd,cAAc;EACd,YAAY;AACd;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,6BAA6B;AAC/B;;AAEA;;CAEC;AACD;EACE;IACE,cAAc;IACd,cAAc;EAChB;EACA;IACE,UAAU;EACZ;EACA;IACE,cAAc;IACd,cAAc;EAChB;AACF;;AAEA;;;CAGC;AACD;EACE;IACE,cAAc;IACd,cAAc;EAChB;AACF;;AAEA;;;CAGC;AACD;EACE;IACE,cAAc;IACd,cAAc;EAChB;EACA;IACE,UAAU;EACZ;EACA;IACE,cAAc;IACd,cAAc;EAChB;AACF;;AAEA;;;CAGC;AACD;EACE;IACE,cAAc;IACd,cAAc;IACd,0BAA0B;EAC5B;EACA;IACE,cAAc;IACd,cAAc;EAChB;EACA;IACE,UAAU;EACZ;AACF;;AAEA;;;CAGC;AACD;EACE;IACE,cAAc;IACd,cAAc;IACd,0BAA0B;EAC5B;EACA;IACE,UAAU;EACZ;EACA;IACE,UAAU;EACZ;AACF;;AAEA;;;CAGC;AACD;EACE;IACE,eAAe;IACf,eAAe;IACf,0BAA0B;EAC5B;EACA;IACE,cAAc;IACd,cAAc;EAChB;EACA;IACE,UAAU;EACZ;EACA;IACE,UAAU;EACZ;AACF;;AAEA;;;CAGC;AACD;EACE;IACE,eAAe;IACf,eAAe;IACf,0BAA0B;EAC5B;EACA;IACE,cAAc;IACd,cAAc;EAChB;EACA;IACE,UAAU;EACZ;EACA;IACE,UAAU;EACZ;EACA;IACE,UAAU;IACV,eAAe;EACjB;AACF;;AAEA;;EAEE;AACF;EACE;IACE,eAAe;IACf,eAAe;IACf,0BAA0B;EAC5B;EACA;IACE,cAAc;IACd,cAAc;EAChB;EACA;IACE,UAAU;EACZ;EACA;IACE,UAAU;EACZ;EACA;IACE,UAAU;IACV,eAAe;EACjB;AACF;;AAEA;EACE;IACE,iBAAiB;EACnB;AACF",sourcesContent:["html,\nbody {\n  margin: 0;\n  padding: 0;\n  font-size: 16px;\n  font-family: 'Chivo', sans-serif;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: cornflowerblue;\n  color: whitesmoke;\n}\n\n.full-width {\n  width: 65%;\n  margin: auto;\n  margin-top: 0;\n  background-color: whitesmoke;\n  color: dodgerblue;\n  border-radius: 0 0 2% 2%;\n  padding: 1%;\n  margin-bottom: 2%;\n  font-weight: 400;\n}\n\nnav {\n  text-align: center;\n  margin-top: 2em;\n}\n\n.section-link {\n  text-decoration: none;\n  outline: none;\n  color: dimgrey;\n  padding: 1%;\n}\n\n.search-form {\n  display: flex;\n  flex-direction: column;\n  align-content: space-around;\n  width: 90%;\n  height: auto;\n  margin: auto;\n  text-align: center;\n}\n\n#search-bar {\n  width: 50%;\n  padding: 20px;\n  font-size: 1.15em;\n  margin: auto;\n  display: block;\n  margin-bottom: 1.15em;\n  color: cornflowerblue;\n  border-radius: 2%;\n  border: none;\n  text-decoration: none;\n}\n\n.clear-button {\n  text-decoration: none;\n  padding: 5px;\n  font-size: large;\n  border: none;\n  color: tomato;\n  background-color: whitesmoke;\n  -webkit-appearance: none;\n  border-radius: 5px;\n  margin: auto;\n}\n\n.hidden {\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n}\n\n.heading {\n  text-align: center;\n  font-weight: 400;\n}\n\n.tagline {\n  text-align: center;\n  font-style: italic;\n  font-weight: 400;\n  font-size: 1em;\n  color: slategrey;\n}\n\n.main-grid {\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr;\n  grid-row-gap: 1%;\n  grid-template-areas:\n    'projects'\n    'key';\n}\n\n.project-grid {\n  display: grid;\n  grid-area: projects;\n  grid-template-columns: 1fr 1fr;\n  grid-column-gap: 1%;\n  align-items: center;\n  justify-items: center;\n  justify-content: space-evenly;\n  width: 80%;\n  margin: auto;\n  text-align: center;\n  margin-bottom: 1em;\n}\n\n.key-grid {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  color: darkslategrey;\n}\n\n.project {\n  display: grid;\n  grid-template-columns: 1fr;\n  background-color: whitesmoke;\n  color: cornflowerblue;\n  border-radius: 2%;\n  min-width: 95%;\n  max-width: 95%;\n  margin-top: 20px;\n  align-self: stretch;\n}\n\n.description {\n  color: dimgrey;\n  width: 80%;\n  font-size: larger;\n  margin: auto;\n}\n\n.detail {\n  font-size: 90%;\n}\n\n.tech-used {\n  color: dimgrey;\n  width: 70%;\n  margin: auto;\n  text-align: left;\n  font-size: 100%;\n  font-weight: 400;\n}\n\n.status-line {\n  align-self: end;\n  color: darkslategrey;\n  font-size: large;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n}\n\n.link-image {\n  width: 26px;\n}\n\n.uses-title {\n  color: cornflowerblue;\n}\n\n.feature-list {\n  width: 50%;\n  margin: auto;\n  text-align: left;\n  font-size: 90%;\n}\n\n.project-image {\n  max-width: 50%;\n  height: auto;\n  padding: 20px;\n  margin: auto;\n}\n\n.profile-text {\n  color: dimgrey;\n  min-width: 70%;\n  max-width: 70%;\n  margin: auto;\n}\n\n.lang-intro {\n  margin-bottom: 3em;\n}\n\n.lang {\n  margin-bottom: 2.5em;\n}\n\n.tool-icon-list {\n  text-align: center;\n}\n\n.tool-icon {\n  display: inline-block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.active {\n  color: #2dc937;\n}\n\n.archived {\n  color: #e7b416;\n}\n\n.retired {\n  color: darkgray;\n}\n\n.me-links {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n}\n\n/*\n ##Device = absurdly large monitors\n*/\n@media only screen and (min-width: 2450px) {\n  .project-grid {\n    min-width: 50%;\n    max-width: 50%;\n  }\n  .full-width {\n    width: 45%;\n  }\n  .profile-text {\n    min-width: 60%;\n    max-width: 60%;\n  }\n}\n\n/*\n ##Device = Desktops\n  ##Screen = 1281px to higher resolution desktops\n*/\n@media (min-width: 1281px) {\n  .profile-text {\n    min-width: 60%;\n    max-width: 60%;\n  }\n}\n\n/*\n  ##Device = Laptops, Desktops\n  ##Screen = B/w 1025px to 1280px\n*/\n@media (min-width: 1025px) and (max-width: 1280px) {\n  .project-grid {\n    min-width: 95%;\n    max-width: 95%;\n  }\n  .full-width {\n    width: 90%;\n  }\n  .profile-text {\n    min-width: 60%;\n    max-width: 60%;\n  }\n}\n\n/*\n  ##Device = Tablets, Ipads (portrait)\n  ##Screen = B/w 768px to 1024px\n*/\n@media (min-width: 768px) and (max-width: 1024px) {\n  .project-grid {\n    min-width: 95%;\n    max-width: 95%;\n    grid-template-columns: 1fr;\n  }\n  .project {\n    min-width: 80%;\n    max-width: 80%;\n  }\n  .full-width {\n    width: 75%;\n  }\n}\n\n/*\n  ##Device = Tablets, Ipads (landscape)\n  ##Screen = B/w 768px to 1024px\n*/\n@media (min-width: 768px) and (max-width: 1024px) and (orientation: landscape) {\n  .project-grid {\n    min-width: 95%;\n    max-width: 95%;\n    grid-template-columns: 1fr;\n  }\n  .full-width {\n    width: 90%;\n  }\n  .feature-list {\n    width: 80%;\n  }\n}\n\n/*\n  ##Device = Low Resolution Tablets, Mobiles (Landscape)\n  ##Screen = B/w 481px to 767px\n*/\n@media (min-width: 481px) and (max-width: 767px) {\n  .project-grid {\n    min-width: 100%;\n    max-width: 100%;\n    grid-template-columns: 1fr;\n  }\n  .project {\n    min-width: 95%;\n    max-width: 95%;\n  }\n  .full-width {\n    width: 95%;\n  }\n  .feature-list {\n    width: 70%;\n  }\n}\n\n/*\n  ##Device = Most of the Smartphones Mobiles (Portrait)\n  ##Screen = B/w 320px to 479px\n*/\n@media (min-width: 320px) and (max-width: 480px) {\n  .project-grid {\n    min-width: 100%;\n    max-width: 100%;\n    grid-template-columns: 1fr;\n  }\n  .project {\n    min-width: 95%;\n    max-width: 95%;\n  }\n  .full-width {\n    width: 95%;\n  }\n  .feature-list {\n    width: 70%;\n  }\n  #search-bar {\n    width: 75%;\n    margin-top: 1em;\n  }\n}\n\n/*\n ##Device = very small phones\n */\n@media (min-width: 320px) and (max-width: 401px) {\n  .project-grid {\n    min-width: 100%;\n    max-width: 100%;\n    grid-template-columns: 1fr;\n  }\n  .project {\n    min-width: 90%;\n    max-width: 90%;\n  }\n  .full-width {\n    width: 90%;\n  }\n  .feature-list {\n    width: 80%;\n  }\n  #search-bar {\n    width: 75%;\n    margin-top: 1em;\n  }\n}\n\n@media (hover: hover) {\n  .section-link:hover {\n    color: dodgerblue;\n  }\n}\n"],sourceRoot:""}]);const A=a},645:n=>{"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,i){"string"==typeof n&&(n=[[null,n,""]]);var r={};if(i)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(r[a]=!0)}for(var A=0;A<n.length;A++){var c=[].concat(n[A]);i&&r[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),e.push(c))}},e}},15:n=>{"use strict";function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,i=new Array(e);t<e;t++)i[t]=n[t];return i}n.exports=function(n){var t,i,r=(i=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(n)){var t=[],i=!0,r=!1,o=void 0;try{for(var a,A=n[Symbol.iterator]();!(i=(a=A.next()).done)&&(t.push(a.value),!e||t.length!==e);i=!0);}catch(n){r=!0,o=n}finally{try{i||null==A.return||A.return()}finally{if(r)throw o}}return t}}(t,i)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var i=Object.prototype.toString.call(n).slice(8,-1);return"Object"===i&&n.constructor&&(i=n.constructor.name),"Map"===i||"Set"===i?Array.from(n):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?e(n,t):void 0}}(t,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[1],a=r[3];if("function"==typeof btoa){var A=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(A),s="/*# ".concat(c," */"),l=a.sources.map((function(n){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(n," */")}));return[o].concat(l).concat([s]).join("\n")}return[o].join("\n")}},466:function(n){n.exports=function(){"use strict";var n=Object.prototype.toString,e=Array.isArray||function(e){return"[object Array]"===n.call(e)};function t(n){return"function"==typeof n}function i(n){return n.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function r(n,e){return null!=n&&"object"==typeof n&&e in n}var o=RegExp.prototype.test;var a=/\S/;function A(n){return!function(n,e){return o.call(n,e)}(a,n)}var c={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"};var s=/\s*/,l=/\s+/,d=/\s*=/,u=/\s*\}/,p=/#|\^|\/|>|\{|&|=|!/;function m(n){this.string=n,this.tail=n,this.pos=0}function h(n,e){this.view=n,this.cache={".":this.view},this.parent=e}function f(){this.templateCache={_cache:{},set:function(n,e){this._cache[n]=e},get:function(n){return this._cache[n]},clear:function(){this._cache={}}}}m.prototype.eos=function(){return""===this.tail},m.prototype.scan=function(n){var e=this.tail.match(n);if(!e||0!==e.index)return"";var t=e[0];return this.tail=this.tail.substring(t.length),this.pos+=t.length,t},m.prototype.scanUntil=function(n){var e,t=this.tail.search(n);switch(t){case-1:e=this.tail,this.tail="";break;case 0:e="";break;default:e=this.tail.substring(0,t),this.tail=this.tail.substring(t)}return this.pos+=e.length,e},h.prototype.push=function(n){return new h(n,this)},h.prototype.lookup=function(n){var e,i,o,a=this.cache;if(a.hasOwnProperty(n))e=a[n];else{for(var A,c,s,l=this,d=!1;l;){if(n.indexOf(".")>0)for(A=l.view,c=n.split("."),s=0;null!=A&&s<c.length;)s===c.length-1&&(d=r(A,c[s])||(i=A,o=c[s],null!=i&&"object"!=typeof i&&i.hasOwnProperty&&i.hasOwnProperty(o))),A=A[c[s++]];else A=l.view[n],d=r(l.view,n);if(d){e=A;break}l=l.parent}a[n]=e}return t(e)&&(e=e.call(this.view)),e},f.prototype.clearCache=function(){void 0!==this.templateCache&&this.templateCache.clear()},f.prototype.parse=function(n,t){var r=this.templateCache,o=n+":"+(t||g.tags).join(":"),a=void 0!==r,c=a?r.get(o):void 0;return null==c&&(c=function(n,t){if(!n)return[];var r,o,a,c=!1,h=[],f=[],C=[],E=!1,w=!1,B="",b=0;function v(){if(E&&!w)for(;C.length;)delete f[C.pop()];else C=[];E=!1,w=!1}function y(n){if("string"==typeof n&&(n=n.split(l,2)),!e(n)||2!==n.length)throw new Error("Invalid tags: "+n);r=new RegExp(i(n[0])+"\\s*"),o=new RegExp("\\s*"+i(n[1])),a=new RegExp("\\s*"+i("}"+n[1]))}y(t||g.tags);for(var x,k,j,I,S,L,U=new m(n);!U.eos();){if(x=U.pos,j=U.scanUntil(r))for(var D=0,T=j.length;D<T;++D)A(I=j.charAt(D))?(C.push(f.length),B+=I):(w=!0,c=!0,B+=" "),f.push(["text",I,x,x+1]),x+=1,"\n"===I&&(v(),B="",b=0,c=!1);if(!U.scan(r))break;if(E=!0,k=U.scan(p)||"name",U.scan(s),"="===k?(j=U.scanUntil(d),U.scan(d),U.scanUntil(o)):"{"===k?(j=U.scanUntil(a),U.scan(u),U.scanUntil(o),k="&"):j=U.scanUntil(o),!U.scan(o))throw new Error("Unclosed tag at "+U.pos);if(S=">"==k?[k,j,x,U.pos,B,b,c]:[k,j,x,U.pos],b++,f.push(S),"#"===k||"^"===k)h.push(S);else if("/"===k){if(!(L=h.pop()))throw new Error('Unopened section "'+j+'" at '+x);if(L[1]!==j)throw new Error('Unclosed section "'+L[1]+'" at '+x)}else"name"===k||"{"===k||"&"===k?w=!0:"="===k&&y(j)}if(v(),L=h.pop())throw new Error('Unclosed section "'+L[1]+'" at '+U.pos);return function(n){for(var e,t=[],i=t,r=[],o=0,a=n.length;o<a;++o)switch((e=n[o])[0]){case"#":case"^":i.push(e),r.push(e),i=e[4]=[];break;case"/":r.pop()[5]=e[2],i=r.length>0?r[r.length-1][4]:t;break;default:i.push(e)}return t}(function(n){for(var e,t,i=[],r=0,o=n.length;r<o;++r)(e=n[r])&&("text"===e[0]&&t&&"text"===t[0]?(t[1]+=e[1],t[3]=e[3]):(i.push(e),t=e));return i}(f))}(n,t),a&&r.set(o,c)),c},f.prototype.render=function(n,e,t,i){var r=this.getConfigTags(i),o=this.parse(n,r),a=e instanceof h?e:new h(e,void 0);return this.renderTokens(o,a,t,n,i)},f.prototype.renderTokens=function(n,e,t,i,r){for(var o,a,A,c="",s=0,l=n.length;s<l;++s)A=void 0,"#"===(a=(o=n[s])[0])?A=this.renderSection(o,e,t,i,r):"^"===a?A=this.renderInverted(o,e,t,i,r):">"===a?A=this.renderPartial(o,e,t,r):"&"===a?A=this.unescapedValue(o,e):"name"===a?A=this.escapedValue(o,e,r):"text"===a&&(A=this.rawValue(o)),void 0!==A&&(c+=A);return c},f.prototype.renderSection=function(n,i,r,o,a){var A=this,c="",s=i.lookup(n[1]);if(s){if(e(s))for(var l=0,d=s.length;l<d;++l)c+=this.renderTokens(n[4],i.push(s[l]),r,o,a);else if("object"==typeof s||"string"==typeof s||"number"==typeof s)c+=this.renderTokens(n[4],i.push(s),r,o,a);else if(t(s)){if("string"!=typeof o)throw new Error("Cannot use higher-order sections without the original template");null!=(s=s.call(i.view,o.slice(n[3],n[5]),(function(n){return A.render(n,i,r,a)})))&&(c+=s)}else c+=this.renderTokens(n[4],i,r,o,a);return c}},f.prototype.renderInverted=function(n,t,i,r,o){var a=t.lookup(n[1]);if(!a||e(a)&&0===a.length)return this.renderTokens(n[4],t,i,r,o)},f.prototype.indentPartial=function(n,e,t){for(var i=e.replace(/[^ \t]/g,""),r=n.split("\n"),o=0;o<r.length;o++)r[o].length&&(o>0||!t)&&(r[o]=i+r[o]);return r.join("\n")},f.prototype.renderPartial=function(n,e,i,r){if(i){var o=this.getConfigTags(r),a=t(i)?i(n[1]):i[n[1]];if(null!=a){var A=n[6],c=n[5],s=n[4],l=a;0==c&&s&&(l=this.indentPartial(a,s,A));var d=this.parse(l,o);return this.renderTokens(d,e,i,l,r)}}},f.prototype.unescapedValue=function(n,e){var t=e.lookup(n[1]);if(null!=t)return t},f.prototype.escapedValue=function(n,e,t){var i=this.getConfigEscape(t)||g.escape,r=e.lookup(n[1]);if(null!=r)return"number"==typeof r&&i===g.escape?String(r):i(r)},f.prototype.rawValue=function(n){return n[1]},f.prototype.getConfigTags=function(n){return e(n)?n:n&&"object"==typeof n?n.tags:void 0},f.prototype.getConfigEscape=function(n){return n&&"object"==typeof n&&!e(n)?n.escape:void 0};var g={name:"mustache.js",version:"4.1.0",tags:["{{","}}"],clearCache:void 0,escape:void 0,parse:void 0,render:void 0,Scanner:void 0,Context:void 0,Writer:void 0,set templateCache(n){C.templateCache=n},get templateCache(){return C.templateCache}},C=new f;return g.clearCache=function(){return C.clearCache()},g.parse=function(n,e){return C.parse(n,e)},g.render=function(n,t,i,r){if("string"!=typeof n)throw new TypeError('Invalid template! Template should be a "string" but "'+((e(o=n)?"array":typeof o)+'" was given as the first argument for mustache#render(template, view, partials)'));var o;return C.render(n,t,i,r)},g.escape=function(n){return String(n).replace(/[&<>"'`=\/]/g,(function(n){return c[n]}))},g.Scanner=m,g.Context=h,g.Writer=f,g}()},379:(n,e,t)=>{"use strict";var i,r=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),o=[];function a(n){for(var e=-1,t=0;t<o.length;t++)if(o[t].identifier===n){e=t;break}return e}function A(n,e){for(var t={},i=[],r=0;r<n.length;r++){var A=n[r],c=e.base?A[0]+e.base:A[0],s=t[c]||0,l="".concat(c," ").concat(s);t[c]=s+1;var d=a(l),u={css:A[1],media:A[2],sourceMap:A[3]};-1!==d?(o[d].references++,o[d].updater(u)):o.push({identifier:l,updater:h(u,e),references:1}),i.push(l)}return i}function c(n){var e=document.createElement("style"),i=n.attributes||{};if(void 0===i.nonce){var o=t.nc;o&&(i.nonce=o)}if(Object.keys(i).forEach((function(n){e.setAttribute(n,i[n])})),"function"==typeof n.insert)n.insert(e);else{var a=r(n.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var s,l=(s=[],function(n,e){return s[n]=e,s.filter(Boolean).join("\n")});function d(n,e,t,i){var r=t?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(n.styleSheet)n.styleSheet.cssText=l(e,r);else{var o=document.createTextNode(r),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(o,a[e]):n.appendChild(o)}}function u(n,e,t){var i=t.css,r=t.media,o=t.sourceMap;if(r?n.setAttribute("media",r):n.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleSheet)n.styleSheet.cssText=i;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(i))}}var p=null,m=0;function h(n,e){var t,i,r;if(e.singleton){var o=m++;t=p||(p=c(e)),i=d.bind(null,t,o,!1),r=d.bind(null,t,o,!0)}else t=c(e),i=u.bind(null,t,e),r=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return i(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;i(n=e)}else r()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i));var t=A(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var i=0;i<t.length;i++){var r=a(t[i]);o[r].references--}for(var c=A(n,e),s=0;s<t.length;s++){var l=a(t[s]);0===o[l].references&&(o[l].updater(),o.splice(l,1))}t=c}}}}},e={};function t(i){if(e[i])return e[i].exports;var r=e[i]={id:i,exports:{}};return n[i].call(r.exports,r,r.exports,t),r.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var i in e)t.o(e,i)&&!t.o(n,i)&&Object.defineProperty(n,i,{enumerable:!0,get:e[i]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var i=e.getElementsByTagName("script");i.length&&(n=i[i.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),(()=>{"use strict";var n,e="Python",i="JavaScript",r="CSS",o="HTML",a="GDB",A="Flake8",c="Black",s="pytest",l="ESLint",d="Prettier",u="SQLite",p="Make",m="Poetry",h="Yarn",f="Travis CI",g="Codecov";function C(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}var E={ci:!0,name:"succ",description:"Compiler for a subset of C.",features:["Multi-pass compiler","Growing C support","x86-64 assembly","Robust error handling","Basic type checking"],languageList:["Haskell"],toolList:["Hspec","Hlint","Ormolu","weeder","ghcid"],buildList:["Stack",f,g],year:"2019",status:"active"},w={ci:!0,name:"pyfunctory",description:"Pythonic implementations of functional programming concepts.",detail:"Map, filter, reduce, and friends built from generator expressions and list comprehensions.",languageList:[e],toolList:[s,A,c],buildList:[m,f,g],year:"2017",status:"archived"},B={ci:!1,name:"sudoku solver",altName:"sudoku-solver.online",description:"Sudoku solver website.",detail:"The solver itself is written in C, and then compiled to webassembly.",languageList:["C",i,r,o],toolList:["WebAssembly"],buildList:["Emscripten"],year:"2018",status:"retired"},b={ci:!1,name:"headlinewords.top",description:"Site tracking words used in news headlines.",detail:"Daily, weekly, and monthly trends from a range of sources, across multiple countries.",languageList:[e,"SQL",r,o],toolList:["Flask","Jinja2",u],buildList:["pip","DigitalOcean","NGINX"],year:"2017",status:"archived"},v={ci:!1,name:"piptube",description:"Picture-in-picture wrapper for mpv and youtube-dl.",features:["Video and audio","Play video URL","Play search result","Command line jukebox","Config file settings"],languageList:[e],toolList:["youtube-dl","mpv"],buildList:[m],year:"2017",status:"archived"},y={ci:!0,name:"self.site",ghAction:"deploy",altName:"jgthomas.github.io",description:"Portfolio website.",detail:"Responsive site with just the bare-bones tech of the web.",languageList:[i,r,o],toolList:["Grid","Flexbox","media queries","{{ mustache }}",l,d,"webpack","Babel"],buildList:[h,"GitHub Actions","GitHub Pages"],year:"2019",status:"active"},x={ci:!0,name:"calcasm",description:"Command line calculator written in x86-64 assembly.",detail:"All input, output, parsing, and calculation performed in pure assembly, with Linux syscalls.",languageList:["x86-64 Assembly"],toolList:["as","ld",a],buildList:[p,f],year:"2018",status:"archived"},k={ci:!0,name:"draughts",altName:"DraughtsGame",description:"Desktop draughts application.",features:["Computer player","Save and resume","Graphical mode","Text mode","Swap bewteen modes"],languageList:["Java","SQL"],toolList:["JavaFX","JUnit",u],buildList:["Maven",f],year:"2018",status:"archived"},j={ci:!0,name:"braingame.xyz",description:"Brain game website.",detail:"Anagrams, word games, sudoku, and more to come.",languageList:[e,i,r,o],toolList:["FastAPI","React","Docker",s,A,c,l,d,"pre-commit"],buildList:[m,h,f,g,"Docker Hub","AWS Elastic Beanstalk"],year:"2020",status:"active"},I={ci:!0,name:"emulator",altName:"chipset_emulator",description:"Emulator for 4- and 8-bit chipsets.",features:["Interactive shell","Run program from file","Custom assembly","Simple assembler","Step-through debugger"],languageList:["C"],toolList:["cmocka",a,"Valgrind"],buildList:[p,f],year:"2018",status:"archived"},S=function(n){var e;n.image=(e=n.name,"images/".concat(e.replaceAll(" ","_"),".png")),n.languages=n.languageList.join(", "),n.tools=n.toolList.join(", "),n.build=n.buildList.join(", "),n.midlink=function(n){if(!n.ci)return"";if(n.ghAction)return"https://github.com/jgthomas/jgthomas.github.io/workflows/".concat(n.ghAction,"/badge.svg");var e=n.altName?n.altName:n.name;return"https://travis-ci.com/jgthomas/".concat(e,".svg?branch=master")}(n),n.github=function(n){var e=n.altName?n.altName:n.name;return"https://github.com/jgthomas/".concat(e)}(n),n.octocat="https://raw.githubusercontent.com/github/explore/78df643247d429f6cc873026c0622819ad797942/topics/github/github.png"};S(E),S(j),S(y),S(k),S(I),S(x),S(v),S(w),S(B),S(b);var L=(C(n={},E.name,E),C(n,j.name,j),C(n,k.name,k),C(n,y.name,y),C(n,x.name,x),C(n,I.name,I),C(n,v.name,v),C(n,b.name,b),C(n,B.name,B),C(n,w.name,w),n),U={projects:Object.keys(L).map((function(n){return L[n]}))},D=t(466),T=t.n(D);function Y(n,e){var t;if("undefined"==typeof Symbol||null==n[Symbol.iterator]){if(Array.isArray(n)||(t=function(n,e){if(n){if("string"==typeof n)return M(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?M(n,e):void 0}}(n))||e&&n&&"number"==typeof n.length){t&&(n=t);var i=0,r=function(){};return{s:r,n:function(){return i>=n.length?{done:!0}:{done:!1,value:n[i++]}},e:function(n){throw n},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,A=!1;return{s:function(){t=n[Symbol.iterator]()},n:function(){var n=t.next();return a=n.done,n},e:function(n){A=!0,o=n},f:function(){try{a||null==t.return||t.return()}finally{if(A)throw o}}}}function M(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,i=new Array(e);t<e;t++)i[t]=n[t];return i}document.addEventListener("DOMContentLoaded",(function(){var n=document.getElementById("project-template-list");if(n){var e=T().render(n.innerHTML,U);document.getElementById("all-projects").innerHTML=e}}));var O=function(n){n.classList.remove("hidden")},P=function(n){n.classList.add("hidden")},Z=function(){var n=document.getElementById("clear-button");P(n)},q=function(){var n,e=Y(document.getElementsByClassName("project"));try{for(e.s();!(n=e.n()).done;){var t=n.value;O(t)}}catch(n){e.e(n)}finally{e.f()}};document.addEventListener("DOMContentLoaded",(function(){var n=document.getElementById("search-form");n&&n.addEventListener("submit",(function(n){n.preventDefault(),n.stopPropagation()}))})),document.addEventListener("DOMContentLoaded",(function(){var n=document.getElementById("search-bar");n&&n.addEventListener("input",(function(){var e,t=n.value.toLowerCase().trim();t?(e=document.getElementById("clear-button"),O(e),function(n){var e,t,i,r,o,a=Y(document.getElementsByClassName("project"));try{for(a.s();!(e=a.n()).done;){var A=e.value;(t=A.id,i=void 0,r=void 0,o=void 0,i=L[t],r=i.detail?i.detail:"",o=i.features?i.features.join(", "):"","".concat(i.name,"\n            ").concat(i.description,"\n            ").concat(r,"\n            ").concat(o,"\n            ").concat(i.languages,"\n            ").concat(i.tools,"\n            ").concat(i.build,"\n            ").concat(i.year,"\n            ").concat(i.status,"\n           ").toLowerCase()).indexOf(n)>-1?O(A):P(A)}}catch(n){a.e(n)}finally{a.f()}}(t)):(q(),Z())}))})),document.addEventListener("DOMContentLoaded",(function(){var n=document.getElementById("clear-button");n&&n.addEventListener("click",(function(){q(),Z()}))}));var N=t(379),V=t.n(N),z=t(424);V()(z.Z,{insert:"head",singleton:!1}),z.Z.locals,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,