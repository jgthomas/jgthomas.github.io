(()=>{"use strict";var e={44:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(15),r=t.n(a),i=t(645),o=t.n(i)()(r());o.push([e.id,'html,body{margin:0;padding:0;font-size:16px;font-family:"Chivo",sans-serif;font-family:"Source Sans Pro",sans-serif;background-color:#6495ed}.full-width{width:95%;margin:auto;margin-top:0;background-color:#f5f5f5;border-radius:0 0 2% 2%;padding:1%;margin-bottom:2%;font-weight:400}nav{text-align:center;margin-top:2em}nav a{text-decoration:none;outline:none;color:dimgray;padding:1%}.key-grid{display:grid;grid-template-columns:1fr;grid-template-rows:1fr;grid-column-gap:1%;align-items:center;justify-items:center;justify-content:space-evenly;text-align:center;margin-top:1em}.key-items{display:flex;flex-direction:row;justify-content:space-around;color:#2f4f4f;text-align:center;width:100%;margin-top:1em}.hidden{position:absolute;overflow:hidden;clip:rect(0 0 0 0);height:1px;width:1px;margin:-1px;padding:0;border:0}.heading{text-align:center;font-weight:400;margin-bottom:0;color:#1e90ff}.profile-text{color:dimgray;min-width:80%;max-width:80%;margin:auto;text-align:left}@media only screen and (min-width: 768px){.full-width{width:80%}}@media only screen and (min-width: 1024px){.full-width{width:90%}.profile-text{min-width:60%;max-width:60%}}@media only screen and (min-width: 1680px){.full-width{width:60%}}@media only screen and (min-width: 2560px){.full-width{width:45%}}@media(hover: hover){nav a:hover{color:#1e90ff}}',"",{version:3,sources:["webpack://./src/scss/index.scss","webpack://./src/scss/_variables.scss","webpack://./src/scss/_layouts.scss"],names:[],mappings:"AAGA,UAEE,QAAA,CACA,SAAA,CACA,cAAA,CACA,8BAAA,CACA,wCAAA,CACA,wBCVsB,CDaxB,YACE,SAAA,CACA,WAAA,CACA,YAAA,CACA,wBChBqB,CDiBrB,uBAAA,CACA,UAAA,CACA,gBAAA,CACA,eAAA,CAGF,IACE,iBAAA,CACA,cAAA,CAEA,MACE,oBAAA,CACA,YAAA,CACA,aC5BkB,CD6BlB,UAAA,CAIJ,UACE,YAAA,CACA,yBAAA,CACA,sBAAA,CACA,kBAAA,CACA,kBAAA,CACA,oBAAA,CACA,4BAAA,CACA,iBAAA,CACA,cAAA,CAGF,WACE,YAAA,CACA,kBAAA,CACA,4BAAA,CACA,aAAA,CACA,iBAAA,CACA,UAAA,CACA,cAAA,CAGF,QACE,iBAAA,CACA,eAAA,CACA,kBAAA,CACA,UAAA,CACA,SAAA,CACA,WAAA,CACA,SAAA,CACA,QAAA,CAGF,SACE,iBAAA,CACA,eAAA,CACA,eAAA,CACA,aCvEc,CD0EhB,cACE,aC1EoB,CD2EpB,aAAA,CACA,aAAA,CACA,WAAA,CACA,eAAA,CE/EE,0CFqFF,YACE,SAAA,CAAA,CEhFA,2CFqFF,YACE,SAAA,CAEF,cACE,aAAA,CACA,aAAA,CAAA,CEpFA,2CFyFF,YACE,SAAA,CAAA,CEpFA,2CFyFF,YACE,SAAA,CAAA,CElFA,qBF0FA,YACE,aCrHU,CAAA",sourcesContent:["@use 'variables';\n@import 'layouts';\n\nhtml,\nbody {\n  margin: 0;\n  padding: 0;\n  font-size: 16px;\n  font-family: 'Chivo', sans-serif;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: variables.$page-background-color;\n}\n\n.full-width {\n  width: 95%;\n  margin: auto;\n  margin-top: 0;\n  background-color: variables.$box-background-color;\n  border-radius: 0 0 2% 2%;\n  padding: 1%;\n  margin-bottom: 2%;\n  font-weight: 400;\n}\n\nnav {\n  text-align: center;\n  margin-top: 2em;\n\n  a {\n    text-decoration: none;\n    outline: none;\n    color: variables.$standard-text-color;\n    padding: 1%;\n  }\n}\n\n.key-grid {\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr;\n  grid-column-gap: 1%;\n  align-items: center;\n  justify-items: center;\n  justify-content: space-evenly;\n  text-align: center;\n  margin-top: 1em;\n}\n\n.key-items {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  color: darkslategrey;\n  text-align: center;\n  width: 100%;\n  margin-top: 1em;\n}\n\n.hidden {\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n}\n\n.heading {\n  text-align: center;\n  font-weight: 400;\n  margin-bottom: 0;\n  color: variables.$heading-color;\n}\n\n.profile-text {\n  color: variables.$standard-text-color;\n  min-width: 80%;\n  max-width: 80%;\n  margin: auto;\n  text-align: left;\n}\n\n/* Assume mobile then apply styles for larger devices */\n\n@include break(tabletPortrait) {\n  .full-width {\n    width: 80%;\n  }\n}\n\n@include break(tabletLandscape) {\n  .full-width {\n    width: 90%;\n  }\n  .profile-text {\n    min-width: 60%;\n    max-width: 60%;\n  }\n}\n\n@include break(desktop) {\n  .full-width {\n    width: 60%;\n  }\n}\n\n@include break(widescreen) {\n  .full-width {\n    width: 45%;\n  }\n}\n\n/* Apply styles based on other features */\n\n@include feature(hover) {\n  nav {\n    a:hover {\n      color: variables.$heading-color;\n    }\n  }\n}\n","$page-background-color: cornflowerblue;\n$box-background-color: whitesmoke;\n$heading-color: dodgerblue;\n$standard-text-color: dimgrey;\n$standard-text-color-dark: darkslategrey;\n$highlight-text-color: cornflowerblue;\n","@mixin break($breakpoint) {\n  @if $breakpoint==tabletPortrait {\n    @media only screen and (min-width: 768px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==tabletLandscape {\n    @media only screen and (min-width: 1024px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==desktop {\n    @media only screen and (min-width: 1680px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==widescreen {\n    @media only screen and (min-width: 2560px) {\n      @content;\n    }\n  }\n}\n\n@mixin feature($feature) {\n  @if $feature==hover {\n    @media (hover: hover) {\n      @content;\n    }\n  }\n}\n"],sourceRoot:""}]);const s=o},324:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(15),r=t.n(a),i=t(645),o=t.n(i)()(r());o.push([e.id,".main-grid-me{margin-top:1em;display:grid;grid-template-columns:1fr;grid-template-rows:1fr;grid-row-gap:1%}.lang-intro{margin-bottom:3em}.lang{margin-bottom:2.5em}.language-name{color:tomato}.tool-icon-list{text-align:center}.tool-icon{display:inline-block;margin-left:auto;margin-right:auto}.me-links{display:flex;flex-direction:row;justify-content:space-around}.tooling-title{color:#6495ed}","",{version:3,sources:["webpack://./src/scss/me.scss","webpack://./src/scss/_variables.scss"],names:[],mappings:"AAIA,cACE,cAAA,CACA,YAAA,CACA,yBAAA,CACA,sBAAA,CACA,eAAA,CAGF,YACE,iBAAA,CAGF,MACE,mBAAA,CAGF,eACE,YAnBoB,CAsBtB,gBACE,iBAAA,CAGF,WACE,oBAAA,CACA,gBAAA,CACA,iBAAA,CAGF,UACE,YAAA,CACA,kBAAA,CACA,4BAAA,CAGF,eACE,aCpCqB",sourcesContent:["@use 'variables';\n\n$language-text-color: tomato;\n\n.main-grid-me {\n  margin-top: 1em;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr;\n  grid-row-gap: 1%;\n}\n\n.lang-intro {\n  margin-bottom: 3em;\n}\n\n.lang {\n  margin-bottom: 2.5em;\n}\n\n.language-name {\n  color: $language-text-color;\n}\n\n.tool-icon-list {\n  text-align: center;\n}\n\n.tool-icon {\n  display: inline-block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.me-links {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n}\n\n.tooling-title {\n  color: variables.$highlight-text-color;\n}\n","$page-background-color: cornflowerblue;\n$box-background-color: whitesmoke;\n$heading-color: dodgerblue;\n$standard-text-color: dimgrey;\n$standard-text-color-dark: darkslategrey;\n$highlight-text-color: cornflowerblue;\n"],sourceRoot:""}]);const s=o},984:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(15),r=t.n(a),i=t(645),o=t.n(i)()(r());o.push([e.id,'.main-grid-project{margin-top:0em;display:grid;grid-template-columns:1fr;grid-template-rows:1fr;grid-row-gap:1%;grid-template-areas:"projects"}.project-grid{display:grid;grid-area:projects;grid-template-columns:1fr;grid-column-gap:1%;align-items:center;justify-items:center;justify-content:space-evenly;min-width:100%;max-width:100%;margin:auto;text-align:center;margin-bottom:1em}.project{display:grid;grid-template-columns:1fr;background-color:#f5f5f5;border-radius:2%;min-width:95%;max-width:95%;margin-top:20px;align-self:stretch}.title-line{display:flex;flex-direction:row;width:90%;margin:auto;justify-content:space-around;margin-top:20px}.status-light{margin-right:auto;font-size:larger;width:10%}.project-title{font-size:150%;margin-right:auto;margin-left:auto;color:#1e90ff}.description{color:dimgray;width:80%;font-size:larger;margin:auto}.detail{font-size:90%}.tech-used{color:dimgray;width:70%;margin:auto;text-align:left;font-size:100%;font-weight:400}.status-line{align-self:end;color:#2f4f4f;font-size:large;margin-top:20px;display:flex;flex-direction:row;justify-content:space-around}.link-image{width:26px}.uses-title{color:#6495ed}.feature-list{width:70%;margin:auto;text-align:left;font-size:90%}.project-image{max-width:50%;height:auto;padding:20px;margin:auto}.active{color:#2dc937}.archived{color:#e7b416}.retired{color:#a9a9a9}@media only screen and (min-width: 768px){.project-grid{min-width:85%;max-width:85%}.feature-list{width:80%}}@media only screen and (min-width: 1024px){.project-grid{min-width:95%;max-width:95%;grid-template-columns:1fr 1fr}}@media only screen and (min-width: 1680px){.project-grid{min-width:65%;max-width:65%}}@media only screen and (min-width: 2560px){.project-grid{min-width:50%;max-width:50%}}',"",{version:3,sources:["webpack://./src/scss/projects.scss","webpack://./src/scss/_variables.scss","webpack://./src/scss/_layouts.scss"],names:[],mappings:"AAOA,mBACE,cAAA,CACA,YAAA,CACA,yBAAA,CACA,sBAAA,CACA,eAAA,CACA,8BAAA,CAGF,cACE,YAAA,CACA,kBAAA,CACA,yBAAA,CACA,kBAAA,CACA,kBAAA,CACA,oBAAA,CACA,4BAAA,CACA,cAAA,CACA,cAAA,CACA,WAAA,CACA,iBAAA,CACA,iBAAA,CAGF,SACE,YAAA,CACA,yBAAA,CACA,wBCjCqB,CDkCrB,gBAAA,CACA,aAAA,CACA,aAAA,CACA,eAAA,CACA,kBAAA,CAGF,YACE,YAAA,CACA,kBAAA,CACA,SAAA,CACA,WAAA,CACA,4BAAA,CACA,eAAA,CAGF,cACE,iBAAA,CACA,gBAAA,CACA,SAAA,CAGF,eACE,cAAA,CACA,iBAAA,CACA,gBAAA,CACA,aC3Dc,CD8DhB,aACE,aC9DoB,CD+DpB,SAAA,CACA,gBAAA,CACA,WAAA,CAGF,QACE,aAAA,CAGF,WACE,aCzEoB,CD0EpB,SAAA,CACA,WAAA,CACA,eAAA,CACA,cAAA,CACA,eAAA,CAGF,aACE,cAAA,CACA,aClFyB,CDmFzB,eAAA,CACA,eAAA,CACA,YAAA,CACA,kBAAA,CACA,4BAAA,CAGF,YACE,UAAA,CAGF,YACE,aC9FqB,CDiGvB,cACE,SAAA,CACA,WAAA,CACA,eAAA,CACA,aAAA,CAGF,eACE,aAAA,CACA,WAAA,CACA,YAAA,CACA,WAAA,CAGF,QACE,aAlHa,CAqHf,UACE,aArHe,CAwHjB,SACE,aAxHc,CEHZ,0CFiIF,cACE,aAAA,CACA,aAAA,CAEF,cACE,SAAA,CAAA,CEhIA,2CFqIF,cACE,aAAA,CACA,aAAA,CACA,6BAAA,CAAA,CElIA,2CFuIF,cACE,aAAA,CACA,aAAA,CAAA,CEnIA,2CFwIF,cACE,aAAA,CACA,aAAA,CAAA",sourcesContent:["@use 'variables';\n@import 'layouts';\n\n$active-color: #2dc937;\n$archived-color: #e7b416;\n$retired-color: darkgray;\n\n.main-grid-project {\n  margin-top: 0em;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr;\n  grid-row-gap: 1%;\n  grid-template-areas: 'projects';\n}\n\n.project-grid {\n  display: grid;\n  grid-area: projects;\n  grid-template-columns: 1fr;\n  grid-column-gap: 1%;\n  align-items: center;\n  justify-items: center;\n  justify-content: space-evenly;\n  min-width: 100%;\n  max-width: 100%;\n  margin: auto;\n  text-align: center;\n  margin-bottom: 1em;\n}\n\n.project {\n  display: grid;\n  grid-template-columns: 1fr;\n  background-color: variables.$box-background-color;\n  border-radius: 2%;\n  min-width: 95%;\n  max-width: 95%;\n  margin-top: 20px;\n  align-self: stretch;\n}\n\n.title-line {\n  display: flex;\n  flex-direction: row;\n  width: 90%;\n  margin: auto;\n  justify-content: space-around;\n  margin-top: 20px;\n}\n\n.status-light {\n  margin-right: auto;\n  font-size: larger;\n  width: 10%;\n}\n\n.project-title {\n  font-size: 150%;\n  margin-right: auto;\n  margin-left: auto;\n  color: variables.$heading-color;\n}\n\n.description {\n  color: variables.$standard-text-color;\n  width: 80%;\n  font-size: larger;\n  margin: auto;\n}\n\n.detail {\n  font-size: 90%;\n}\n\n.tech-used {\n  color: variables.$standard-text-color;\n  width: 70%;\n  margin: auto;\n  text-align: left;\n  font-size: 100%;\n  font-weight: 400;\n}\n\n.status-line {\n  align-self: end;\n  color: variables.$standard-text-color-dark;\n  font-size: large;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n}\n\n.link-image {\n  width: 26px;\n}\n\n.uses-title {\n  color: variables.$highlight-text-color;\n}\n\n.feature-list {\n  width: 70%;\n  margin: auto;\n  text-align: left;\n  font-size: 90%;\n}\n\n.project-image {\n  max-width: 50%;\n  height: auto;\n  padding: 20px;\n  margin: auto;\n}\n\n.active {\n  color: $active-color;\n}\n\n.archived {\n  color: $archived-color;\n}\n\n.retired {\n  color: $retired-color;\n}\n\n/* Assume mobile then apply styles for larger devices */\n\n@include break(tabletPortrait) {\n  .project-grid {\n    min-width: 85%;\n    max-width: 85%;\n  }\n  .feature-list {\n    width: 80%;\n  }\n}\n\n@include break(tabletLandscape) {\n  .project-grid {\n    min-width: 95%;\n    max-width: 95%;\n    grid-template-columns: 1fr 1fr;\n  }\n}\n\n@include break(desktop) {\n  .project-grid {\n    min-width: 65%;\n    max-width: 65%;\n  }\n}\n\n@include break(widescreen) {\n  .project-grid {\n    min-width: 50%;\n    max-width: 50%;\n  }\n}\n","$page-background-color: cornflowerblue;\n$box-background-color: whitesmoke;\n$heading-color: dodgerblue;\n$standard-text-color: dimgrey;\n$standard-text-color-dark: darkslategrey;\n$highlight-text-color: cornflowerblue;\n","@mixin break($breakpoint) {\n  @if $breakpoint==tabletPortrait {\n    @media only screen and (min-width: 768px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==tabletLandscape {\n    @media only screen and (min-width: 1024px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==desktop {\n    @media only screen and (min-width: 1680px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==widescreen {\n    @media only screen and (min-width: 2560px) {\n      @content;\n    }\n  }\n}\n\n@mixin feature($feature) {\n  @if $feature==hover {\n    @media (hover: hover) {\n      @content;\n    }\n  }\n}\n"],sourceRoot:""}]);const s=o},919:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(15),r=t.n(a),i=t(645),o=t.n(i)()(r());o.push([e.id,".search-form{display:flex;flex-direction:column;align-content:space-around;width:90%;height:auto;margin:auto;text-align:center}#search-bar{width:75%;padding:20px;font-size:1.15em;margin:auto;display:block;margin-bottom:1.15em;margin-top:1em;color:#6495ed;border-radius:2%;border:none;text-decoration:none}.clear-button{text-decoration:none;padding:5px;font-size:large;border:none;color:tomato;background-color:#f5f5f5;-webkit-appearance:none;border-radius:5px;margin:auto}@media only screen and (min-width: 768px){#search-bar{width:50%}}","",{version:3,sources:["webpack://./src/scss/searchBox.scss","webpack://./src/scss/_variables.scss","webpack://./src/scss/_layouts.scss"],names:[],mappings:"AAKA,aACE,YAAA,CACA,qBAAA,CACA,0BAAA,CACA,SAAA,CACA,WAAA,CACA,WAAA,CACA,iBAAA,CAGF,YACE,SAAA,CACA,YAAA,CACA,gBAAA,CACA,WAAA,CACA,aAAA,CACA,oBAAA,CACA,cAAA,CACA,aClBqB,CDmBrB,gBAAA,CACA,WAAA,CACA,oBAAA,CAGF,cACE,oBAAA,CACA,WAAA,CACA,eAAA,CACA,WAAA,CACA,YA/BiB,CAgCjB,wBClCqB,CDmCrB,uBAAA,CACA,iBAAA,CACA,WAAA,CEpCE,0CF0CF,YACE,SAAA,CAAA",sourcesContent:["@use 'variables';\n@import 'layouts';\n\n$alert-text-color: tomato;\n\n.search-form {\n  display: flex;\n  flex-direction: column;\n  align-content: space-around;\n  width: 90%;\n  height: auto;\n  margin: auto;\n  text-align: center;\n}\n\n#search-bar {\n  width: 75%;\n  padding: 20px;\n  font-size: 1.15em;\n  margin: auto;\n  display: block;\n  margin-bottom: 1.15em;\n  margin-top: 1em;\n  color: variables.$highlight-text-color;\n  border-radius: 2%;\n  border: none;\n  text-decoration: none;\n}\n\n.clear-button {\n  text-decoration: none;\n  padding: 5px;\n  font-size: large;\n  border: none;\n  color: $alert-text-color;\n  background-color: variables.$box-background-color;\n  -webkit-appearance: none;\n  border-radius: 5px;\n  margin: auto;\n}\n\n/* Assume mobile then apply styles for larger devices */\n\n@include break(tabletPortrait) {\n  #search-bar {\n    width: 50%;\n  }\n}\n","$page-background-color: cornflowerblue;\n$box-background-color: whitesmoke;\n$heading-color: dodgerblue;\n$standard-text-color: dimgrey;\n$standard-text-color-dark: darkslategrey;\n$highlight-text-color: cornflowerblue;\n","@mixin break($breakpoint) {\n  @if $breakpoint==tabletPortrait {\n    @media only screen and (min-width: 768px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==tabletLandscape {\n    @media only screen and (min-width: 1024px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==desktop {\n    @media only screen and (min-width: 1680px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==widescreen {\n    @media only screen and (min-width: 2560px) {\n      @content;\n    }\n  }\n}\n\n@mixin feature($feature) {\n  @if $feature==hover {\n    @media (hover: hover) {\n      @content;\n    }\n  }\n}\n"],sourceRoot:""}]);const s=o},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,a){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(a)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(r[o]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);a&&r[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),n.push(c))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,a=new Array(n);t<n;t++)a[t]=e[t];return a}e.exports=function(e){var t,a,r=(a=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){var t=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=t){var a,r,i=[],o=!0,s=!1;try{for(t=t.call(e);!(o=(a=t.next()).done)&&(i.push(a.value),!n||i.length!==n);o=!0);}catch(e){s=!0,r=e}finally{try{o||null==t.return||t.return()}finally{if(s)throw r}}return i}}(t,a)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?n(e,t):void 0}}(t,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[1],o=r[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(c," */"),A=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[i].concat(A).concat([l]).join("\n")}return[i].join("\n")}},379:(e,n,t)=>{var a,r=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),i=[];function o(e){for(var n=-1,t=0;t<i.length;t++)if(i[t].identifier===e){n=t;break}return n}function s(e,n){for(var t={},a=[],r=0;r<e.length;r++){var s=e[r],c=n.base?s[0]+n.base:s[0],l=t[c]||0,A="".concat(c," ").concat(l);t[c]=l+1;var d=o(A),u={css:s[1],media:s[2],sourceMap:s[3]};-1!==d?(i[d].references++,i[d].updater(u)):i.push({identifier:A,updater:m(u,n),references:1}),a.push(A)}return a}function c(e){var n=document.createElement("style"),a=e.attributes||{};if(void 0===a.nonce){var i=t.nc;i&&(a.nonce=i)}if(Object.keys(a).forEach((function(e){n.setAttribute(e,a[e])})),"function"==typeof e.insert)e.insert(n);else{var o=r(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}return n}var l,A=(l=[],function(e,n){return l[e]=n,l.filter(Boolean).join("\n")});function d(e,n,t,a){var r=t?"":a.media?"@media ".concat(a.media," {").concat(a.css,"}"):a.css;if(e.styleSheet)e.styleSheet.cssText=A(n,r);else{var i=document.createTextNode(r),o=e.childNodes;o[n]&&e.removeChild(o[n]),o.length?e.insertBefore(i,o[n]):e.appendChild(i)}}function u(e,n,t){var a=t.css,r=t.media,i=t.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=a;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(a))}}var p=null,g=0;function m(e,n){var t,a,r;if(n.singleton){var i=g++;t=p||(p=c(n)),a=d.bind(null,t,i,!1),r=d.bind(null,t,i,!0)}else t=c(n),a=u.bind(null,t,n),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return a(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;a(e=n)}else r()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===a&&(a=Boolean(window&&document&&document.all&&!window.atob)),a));var t=s(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var a=0;a<t.length;a++){var r=o(t[a]);i[r].references--}for(var c=s(e,n),l=0;l<t.length;l++){var A=o(t[l]);0===i[A].references&&(i[A].updater(),i.splice(A,1))}t=c}}}}},n={};function t(a){var r=n[a];if(void 0!==r)return r.exports;var i=n[a]={id:a,exports:{}};return e[a](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var a in n)t.o(n,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:n[a]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var a=n.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),(()=>{var e,n={haskell:"Haskell",c:"C",python:"Python",javascript:"JavaScript",css:"CSS",html:"HTML",java:"Java",sql:"SQL",asm:"x86-64 Assembly",go:"Go",webTech:"Web Tech"},a="Hspec",r="Hlint",i="Ormolu",o="weeder",s="ghcid",c="GDB",l="cmocka",A="Valgrind",d="Flask",u="Flake8",p="Black",g="pytest",m="ESLint",h="Node.js",f="Jest",C="JUnit",b="JaCoCo",y="webpack",v="Babel",w="Sass",x="AWS",k="Lambda",B="API Gateway",j="DynamoDB",E="pre-commit",S="Prettier",L="SQLite",$="Stack",F="Make",I="Poetry",G="Yarn",T="Maven",D="Travis CI",P="Codecov",U="DigitalOcean",W="NGINX",O="GitHub Actions",Y="Depfu",z="VS Code",M={active:"active",archived:"archived",retired:"retired"},N={web:"web"};function R(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var q={ci:!0,name:"succ",description:"Compiler for a subset of C",features:["Multi-pass compiler","Growing C support","x86-64 assembly","Robust error handling","Basic type enforcement"],languageList:[n.haskell],toolList:[a,r,i,o,s],buildList:[$,D,P],year:"2019",status:M.active,tags:[]},H={ci:!0,name:"pyfunctory",description:"Pythonic implementations of functional programming concepts",detail:"Map, filter, reduce, and friends built from generator expressions and list comprehensions",languageList:[n.python],toolList:[g,u,p],buildList:[I,D,P],year:"2017",status:M.archived,tags:[]},_={ci:!1,name:"sudoku solver",altName:"sudoku-solver.online",description:"Sudoku solver website.",detail:"The solver itself is written in C, and then compiled to webassembly",languageList:[n.c,n.javascript,n.css,n.html],toolList:["WebAssembly"],buildList:["Emscripten"],year:"2018",status:M.retired,tags:[N.web]},V={ci:!1,name:"headlinewords.top",description:"Site tracking words used in news headlines.",detail:"Daily, weekly, and monthly trends from a range of sources, across multiple countries",languageList:[n.python,n.sql,n.css,n.html],toolList:[d,"Jinja2",L],buildList:["pip",U,W],year:"2017",status:M.retired,tags:[N.web]},Z={ci:!1,name:"piptube",description:"Picture-in-picture wrapper for mpv and youtube-dl",features:["Video and audio","Play video URL","Play search result","Command line jukebox","Config file settings"],languageList:[n.python],toolList:["youtube-dl","mpv"],buildList:[I],year:"2017",status:M.archived,tags:[]},J={ci:!0,name:"self.site",ghAction:"deploy",altName:"jgthomas.github.io",description:"Portfolio website",detail:"Responsive site with just the bare-bones tech of the web",languageList:[n.javascript,n.css,n.html],toolList:["Grid","Flexbox","media queries","{{ mustache }}",m,S,w],buildList:[G,y,v,O,"GitHub Pages",Y],year:"2019",status:M.active,tags:[N.web]},Q={ci:!0,name:"calcasm",description:"Command line calculator written in x86-64 assembly",detail:"All input, output, parsing, and calculation performed in pure assembly, with Linux syscalls",languageList:[n.asm],toolList:["as","ld",c],buildList:[F,D],year:"2018",status:M.archived,tags:[]},X={ci:!0,name:"draughts",altName:"DraughtsGame",description:"Desktop draughts application",features:["Computer player","Save and resume","Graphical mode","Text mode","Swap bewteen modes"],languageList:[n.java,n.sql],toolList:["JavaFX",C,L],buildList:[T,D],year:"2018",status:M.archived,tags:[]},K={ci:!0,name:"braingame.xyz",description:"Brain game website",detail:"Anagrams, word games, sudoku, and more to come",languageList:[n.python,n.javascript,n.css,n.html],toolList:["FastAPI","React","Docker",g,u,p,m,S,E],buildList:[I,G,D,P,"Docker Hub","AWS Elastic Beanstalk"],year:"2020",status:M.active,tags:[N.web]},ee={ci:!0,name:"emulator",altName:"chipset_emulator",description:"Emulator for 4- and 8-bit chipsets",features:["Interactive shell","Run program from file","Custom assembly","Simple assembler","Step-through debugger"],languageList:[n.c],toolList:[l,c,A],buildList:[F,D],year:"2018",status:M.archived,tags:[]},ne={ci:!0,ghAction:"tests",name:"jsoner",description:"JSON Validator",detail:"Built with ".concat("Megaparsec"),languageList:[n.haskell],toolList:[a,r,i,o,s],buildList:[$,O,P],year:"2020",status:M.active,tags:[]},te={ci:!0,ghAction:"deploy",name:"foodApi",description:"Serverless backend for food app",features:["Food pantry record","Recipe book","Matches recipes to food","Suggests options","Alternate ingredients"],languageList:[n.javascript],toolList:[f,h,x,k,B,j,m,S],buildList:["npm",y,v,O,"Serverless Framework",P,Y],year:"2021",status:M.active,tags:[N.web]},ae={ci:!0,name:"dish",description:"Docker clone",detail:"Container management non-solution",features:["Create new containers","Access and use containers","Manage containers"],languageList:[n.go],toolList:["Go Tooling"],buildList:[F,D],year:"2019",status:M.archived,tags:[]},re={ci:!1,name:"playwords.xyz",description:"Word game website",features:["Solve anagrams","Word squares","Scrabble rack"],languageList:[n.python,n.javascript,n.css,n.html],toolList:[d],buildList:["pip",U,W],year:"2017",status:M.retired,tags:[N.web]},ie=function(e){var n;e.image=(n=e.name,"src/img/".concat(n.replaceAll(" ","_"),".png")),e.languages=e.languageList.join(", "),e.tools=e.toolList.join(", "),e.build=e.buildList.join(", "),e.midlink=function(e){if(!e.ci)return"";var n=e.altName?e.altName:e.name;return e.ghAction?"https://github.com/jgthomas/".concat(n,"/workflows/").concat(e.ghAction,"/badge.svg"):"https://travis-ci.com/jgthomas/".concat(n,".svg?branch=master")}(e),e.github=function(e){var n=e.altName?e.altName:e.name;return"https://github.com/jgthomas/".concat(n)}(e),e.octocat="https://raw.githubusercontent.com/github/explore/78df643247d429f6cc873026c0622819ad797942/topics/github/github.png"};ie(q),ie(K),ie(J),ie(X),ie(ee),ie(Q),ie(Z),ie(H),ie(_),ie(V),ie(ne),ie(te),ie(ae),ie(re);var oe,se=(R(e={},q.name,q),R(e,te.name,te),R(e,ne.name,ne),R(e,J.name,J),R(e,ae.name,ae),R(e,X.name,X),R(e,Q.name,Q),R(e,ee.name,ee),R(e,Z.name,Z),R(e,_.name,_),R(e,re.name,re),R(e,V.name,V),e),ce={projects:Object.keys(se).map((function(e){return se[e]}))},le={siteTitle:"The Late Developer",homePage:"index.html",homeTitle:"Projects",mePage:"me.html",meTitle:"Me",cvLink:"https://www.dropbox.com/s/p7sr20jl648jv1k/CV.pdf?dl=0",cvTitle:"CV"};function Ae(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var de,ue="36px",pe="src/img",ge={organisation:"Self-teaching",alt:"Self-teaching",width:ue,image:"".concat(pe,"/laptop_man.png"),startDate:"2017",endDate:"forever",role:"Projects, Project, Projects!"},me={organisation:"City of Edinburgh Council",alt:"Edinbrugh Council",width:ue,image:"".concat(pe,"/edinburgh_council.jpg"),startDate:"2017",endDate:"2018",role:"Database and VBA refactor"},he={organisation:"University of Birmingham",alt:"UoB",width:ue,image:"".concat(pe,"/smallBham.png"),startDate:"2018",endDate:"2019",role:"MSc in Computer Science"},fe={organisation:"codebar.io",alt:"codebar",width:ue,image:"".concat(pe,"/codebar.png"),startDate:"2019",endDate:"2020",role:"Programming Coach"},Ce={organisation:"Bluetel",alt:"Bluetel",width:ue,image:"".concat(pe,"/bluetel_solutions.png"),startDate:"2019",endDate:"present",role:"Software Engineer"},be=(Ae(oe={},Ce.organisation,Ce),Ae(oe,fe.organisation,fe),Ae(oe,he.organisation,he),Ae(oe,me.organisation,me),Ae(oe,ge.organisation,ge),oe),ye={experience:Object.keys(be).map((function(e){return be[e]}))};function ve(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var we="36px",xe="https://raw.githubusercontent.com/devicons/devicon/master/icons",ke={name:n.python,images:[{alt:n.python,width:we,icon:"".concat(xe,"/python/python-original.svg")}],text:'My first language! I started using <span class="language-name">'.concat(n.python,"</span> during my PhD, running multi-agent evolutionary simulations.\n  When I launched myself back into programming a few years later, ").concat(n.python," was where I began.\n  Taking quizzes in the SoloLearn app was soon followed by making console-based games and spinning up websites using ").concat(d,".\n  I returned to ").concat(n.python," for the final project of my computer science degree, testing self-adaptive evolutionary algorithms as solvers of the\n  Boolean satisfiability problem (SAT)."),tooling:[I,g,p,u,E,z]},Be={name:n.c,images:[{alt:n.c,width:we,icon:"".concat(xe,"/c/c-original.svg")}],text:"I tried to learn algorithms and data structures in ".concat(n.python,", but ").concat(n.python," just does too much for you. What was the point of this 'linked list',\n  if the ").concat(n.python,' list was right there? So I switched to <span class="language-name">').concat(n.c,"</span>, which forced me to grapple with pointers and manual memory management, and to\n  implement things myself that are just part of the standard libraries of other languages. I don't expect I'll ever work in ").concat(n.c,", but\n  using it has deeply enriched my understanding of other languages and programming in general."),tooling:["GCC",c,A,l,F,"Vim"]},je={name:"web",images:[{alt:n.html,width:we,icon:"".concat(xe,"/html5/html5-original.svg")},{alt:n.css,width:we,icon:"".concat(xe,"/css3/css3-original.svg")},{alt:n.javascript,width:we,icon:"".concat(xe,"/javascript/javascript-original.svg")}],text:'In addition to allowing me to make things other people can actually <em>see</em>, working with\n  <span class="language-name">'.concat(n.webTech,"</span> really opened up 'API thinking' for me, as a complement to the 'algorithmic thinking' of much of my previous explorations.\n  In doing so, it taught me that it was not 'cheating' if I didn't write it all myself, and that enormously powerful things can be created\n  by making smart use existing tools and services, linked and chained together."),tooling:[G,m,S,f,y,v,w,z]},Ee={name:n.java,images:[{alt:n.java,width:we,icon:"".concat(xe,"/java/java-original.svg")}],text:"The major language of my computer science degree. It still feels slightly absurd that <em>everything</em> has to be a class, and do I really\n  need all that for 'Hello, World!'? But it was this verbose rigidity that really helped drill object-oriented thinking into my brain. More than\n  any other language, <span class=\"language-name\">".concat(n.java,"</span> made me think consciously about how to create and expose abstractions.\n  Grasping the beauty and power of interfaces was also a pivotal moment in my developement, so I forgive the verbosity in full."),tooling:[T,C,b,"IntelliJ"]},Se={name:n.haskell,images:[{alt:n.haskell,width:we,icon:"".concat(xe,"/haskell/haskell-original.svg")}],text:'Learning <span class="language-name">'.concat(n.haskell,"</span> opened up the entire mental landscape of functional programming for me.\n  Don't really do 'favourites', but if I did, ").concat(n.haskell," would be my favourite language.\n  The type system is amazing. Sum types and pattern matching are beautiful&#8212;as is the ability to control how much 'power' a function has, from a simple pure function,\n  to selecting from the hierarchy of functor, applicative, and <strike>burrito</strike> monad."),tooling:[$,a,r,i,s,"Vim"]},Le=function(e){e.tools=e.tooling.join(", ")};Le(ke),Le(Be),Le(je),Le(Ee),Le(Se);var $e=(ve(de={},ke.name,ke),ve(de,Be.name,Be),ve(de,je.name,je),ve(de,Ee.name,Ee),ve(de,Se.name,Se),de),Fe={languages:Object.keys($e).map((function(e){return $e[e]}))},Ie=Object.prototype.toString,Ge=Array.isArray||function(e){return"[object Array]"===Ie.call(e)};function Te(e){return"function"==typeof e}function De(e){return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function Pe(e,n){return null!=e&&"object"==typeof e&&n in e}var Ue=RegExp.prototype.test,We=/\S/;var Oe={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},Ye=/\s*/,ze=/\s+/,Me=/\s*=/,Ne=/\s*\}/,Re=/#|\^|\/|>|\{|&|=|!/;function qe(e){this.string=e,this.tail=e,this.pos=0}function He(e,n){this.view=e,this.cache={".":this.view},this.parent=n}function _e(){this.templateCache={_cache:{},set:function(e,n){this._cache[e]=n},get:function(e){return this._cache[e]},clear:function(){this._cache={}}}}qe.prototype.eos=function(){return""===this.tail},qe.prototype.scan=function(e){var n=this.tail.match(e);if(!n||0!==n.index)return"";var t=n[0];return this.tail=this.tail.substring(t.length),this.pos+=t.length,t},qe.prototype.scanUntil=function(e){var n,t=this.tail.search(e);switch(t){case-1:n=this.tail,this.tail="";break;case 0:n="";break;default:n=this.tail.substring(0,t),this.tail=this.tail.substring(t)}return this.pos+=n.length,n},He.prototype.push=function(e){return new He(e,this)},He.prototype.lookup=function(e){var n,t,a,r=this.cache;if(r.hasOwnProperty(e))n=r[e];else{for(var i,o,s,c=this,l=!1;c;){if(e.indexOf(".")>0)for(i=c.view,o=e.split("."),s=0;null!=i&&s<o.length;)s===o.length-1&&(l=Pe(i,o[s])||(t=i,a=o[s],null!=t&&"object"!=typeof t&&t.hasOwnProperty&&t.hasOwnProperty(a))),i=i[o[s++]];else i=c.view[e],l=Pe(c.view,e);if(l){n=i;break}c=c.parent}r[e]=n}return Te(n)&&(n=n.call(this.view)),n},_e.prototype.clearCache=function(){void 0!==this.templateCache&&this.templateCache.clear()},_e.prototype.parse=function(e,n){var t=this.templateCache,a=e+":"+(n||Ve.tags).join(":"),r=void 0!==t,i=r?t.get(a):void 0;return null==i&&(i=function(e,n){if(!e)return[];var t,a,r,i,o=!1,s=[],c=[],l=[],A=!1,d=!1,u="",p=0;function g(){if(A&&!d)for(;l.length;)delete c[l.pop()];else l=[];A=!1,d=!1}function m(e){if("string"==typeof e&&(e=e.split(ze,2)),!Ge(e)||2!==e.length)throw new Error("Invalid tags: "+e);t=new RegExp(De(e[0])+"\\s*"),a=new RegExp("\\s*"+De(e[1])),r=new RegExp("\\s*"+De("}"+e[1]))}m(n||Ve.tags);for(var h,f,C,b,y,v,w=new qe(e);!w.eos();){if(h=w.pos,C=w.scanUntil(t))for(var x=0,k=C.length;x<k;++x)i=b=C.charAt(x),function(e,n){return Ue.call(e,n)}(We,i)?(d=!0,o=!0,u+=" "):(l.push(c.length),u+=b),c.push(["text",b,h,h+1]),h+=1,"\n"===b&&(g(),u="",p=0,o=!1);if(!w.scan(t))break;if(A=!0,f=w.scan(Re)||"name",w.scan(Ye),"="===f?(C=w.scanUntil(Me),w.scan(Me),w.scanUntil(a)):"{"===f?(C=w.scanUntil(r),w.scan(Ne),w.scanUntil(a),f="&"):C=w.scanUntil(a),!w.scan(a))throw new Error("Unclosed tag at "+w.pos);if(y=">"==f?[f,C,h,w.pos,u,p,o]:[f,C,h,w.pos],p++,c.push(y),"#"===f||"^"===f)s.push(y);else if("/"===f){if(!(v=s.pop()))throw new Error('Unopened section "'+C+'" at '+h);if(v[1]!==C)throw new Error('Unclosed section "'+v[1]+'" at '+h)}else"name"===f||"{"===f||"&"===f?d=!0:"="===f&&m(C)}if(g(),v=s.pop())throw new Error('Unclosed section "'+v[1]+'" at '+w.pos);return function(e){for(var n,t=[],a=t,r=[],i=0,o=e.length;i<o;++i)switch((n=e[i])[0]){case"#":case"^":a.push(n),r.push(n),a=n[4]=[];break;case"/":r.pop()[5]=n[2],a=r.length>0?r[r.length-1][4]:t;break;default:a.push(n)}return t}(function(e){for(var n,t,a=[],r=0,i=e.length;r<i;++r)(n=e[r])&&("text"===n[0]&&t&&"text"===t[0]?(t[1]+=n[1],t[3]=n[3]):(a.push(n),t=n));return a}(c))}(e,n),r&&t.set(a,i)),i},_e.prototype.render=function(e,n,t,a){var r=this.getConfigTags(a),i=this.parse(e,r),o=n instanceof He?n:new He(n,void 0);return this.renderTokens(i,o,t,e,a)},_e.prototype.renderTokens=function(e,n,t,a,r){for(var i,o,s,c="",l=0,A=e.length;l<A;++l)s=void 0,"#"===(o=(i=e[l])[0])?s=this.renderSection(i,n,t,a,r):"^"===o?s=this.renderInverted(i,n,t,a,r):">"===o?s=this.renderPartial(i,n,t,r):"&"===o?s=this.unescapedValue(i,n):"name"===o?s=this.escapedValue(i,n,r):"text"===o&&(s=this.rawValue(i)),void 0!==s&&(c+=s);return c},_e.prototype.renderSection=function(e,n,t,a,r){var i=this,o="",s=n.lookup(e[1]);if(s){if(Ge(s))for(var c=0,l=s.length;c<l;++c)o+=this.renderTokens(e[4],n.push(s[c]),t,a,r);else if("object"==typeof s||"string"==typeof s||"number"==typeof s)o+=this.renderTokens(e[4],n.push(s),t,a,r);else if(Te(s)){if("string"!=typeof a)throw new Error("Cannot use higher-order sections without the original template");null!=(s=s.call(n.view,a.slice(e[3],e[5]),(function(e){return i.render(e,n,t,r)})))&&(o+=s)}else o+=this.renderTokens(e[4],n,t,a,r);return o}},_e.prototype.renderInverted=function(e,n,t,a,r){var i=n.lookup(e[1]);if(!i||Ge(i)&&0===i.length)return this.renderTokens(e[4],n,t,a,r)},_e.prototype.indentPartial=function(e,n,t){for(var a=n.replace(/[^ \t]/g,""),r=e.split("\n"),i=0;i<r.length;i++)r[i].length&&(i>0||!t)&&(r[i]=a+r[i]);return r.join("\n")},_e.prototype.renderPartial=function(e,n,t,a){if(t){var r=this.getConfigTags(a),i=Te(t)?t(e[1]):t[e[1]];if(null!=i){var o=e[6],s=e[5],c=e[4],l=i;0==s&&c&&(l=this.indentPartial(i,c,o));var A=this.parse(l,r);return this.renderTokens(A,n,t,l,a)}}},_e.prototype.unescapedValue=function(e,n){var t=n.lookup(e[1]);if(null!=t)return t},_e.prototype.escapedValue=function(e,n,t){var a=this.getConfigEscape(t)||Ve.escape,r=n.lookup(e[1]);if(null!=r)return"number"==typeof r&&a===Ve.escape?String(r):a(r)},_e.prototype.rawValue=function(e){return e[1]},_e.prototype.getConfigTags=function(e){return Ge(e)?e:e&&"object"==typeof e?e.tags:void 0},_e.prototype.getConfigEscape=function(e){return e&&"object"==typeof e&&!Ge(e)?e.escape:void 0};var Ve={name:"mustache.js",version:"4.2.0",tags:["{{","}}"],clearCache:void 0,escape:void 0,parse:void 0,render:void 0,Scanner:void 0,Context:void 0,Writer:void 0,set templateCache(e){Ze.templateCache=e},get templateCache(){return Ze.templateCache}},Ze=new _e;Ve.clearCache=function(){return Ze.clearCache()},Ve.parse=function(e,n){return Ze.parse(e,n)},Ve.render=function(e,n,t,a){if("string"!=typeof e)throw new TypeError('Invalid template! Template should be a "string" but "'+(Ge(r=e)?"array":typeof r)+'" was given as the first argument for mustache#render(template, view, partials)');var r;return Ze.render(e,n,t,a)},Ve.escape=function(e){return String(e).replace(/[&<>"'`=\/]/g,(function(e){return Oe[e]}))},Ve.Scanner=qe,Ve.Context=He,Ve.Writer=_e;const Je=Ve;var Qe=function(e,n,t){fetch("".concat("./src/templates","/").concat(e).concat(".mst")).then((function(e){return e.text()})).then((function(e){var a=Je.render(e,n);document.getElementById(t).innerHTML=a})).catch((function(n){return console.log("Unable to load template: ".concat(e,". Error: ").concat(n.message))}))};document.addEventListener("DOMContentLoaded",(function(){document.getElementById("project-page")&&(Qe("header",le,"site-header"),Qe("project",ce,"all-projects")),document.getElementById("me-page")&&(Qe("header",le,"site-header"),Qe("experience",ye,"experience"),Qe("language",Fe,"languages"))}));var Xe={STATUS:"status",LANGUAGE:"language",TAGS:"tags",GENERAL:"general"};Object.freeze(Xe);const Ke=Xe;var en=function(e,n){var t=nn(e)(n);return ce.projects.filter((function(e){return t(e)})).map((function(e){return e.name}))},nn=function(e){return function(n){return function(t){return e(n,t)}}},tn=function(e,n){return n.status==e},an=function(e,n){return n.languageList.map((function(e){return e.toLowerCase()})).includes(e)},rn=function(e,n){return n.tags.includes(e)},on=function(e,n){var t,a,r,i;return(t=n.name,r=(a=se[t]).detail?a.detail:"",i=a.features?a.features.join(", "):"","".concat(a.name,"\n              ").concat(a.description,"\n              ").concat(r,"\n              ").concat(i,"\n              ").concat(a.languages,"\n              ").concat(a.tools,"\n              ").concat(a.build,"\n              ").concat(a.year,"\n              ").concat(a.status,"\n             ").toLowerCase()).indexOf(e)>-1};function sn(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=function(e,n){if(e){if("string"==typeof e)return cn(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?cn(e,n):void 0}}(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var a=0,r=function(){};return{s:r,n:function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,s=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return o=e.done,e},e:function(e){s=!0,i=e},f:function(){try{o||null==t.return||t.return()}finally{if(s)throw i}}}}function cn(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,a=new Array(n);t<n;t++)a[t]=e[t];return a}var ln=function(e){e.classList.remove("hidden")},An=function(e){e.classList.add("hidden")},dn=function(){var e=document.getElementById("clear-button");An(e)},un=function(){var e,n=sn(document.getElementsByClassName("project"));try{for(n.s();!(e=n.n()).done;){var t=e.value;ln(t)}}catch(e){n.e(e)}finally{n.f()}};document.addEventListener("DOMContentLoaded",(function(){if(document.getElementById("project-page")){document.getElementById("search-form").addEventListener("submit",(function(e){e.preventDefault(),e.stopPropagation()}));var e=document.getElementById("search-bar");e.addEventListener("input",(function(){var t,a=e.value.toLowerCase().trim();if(!a)return un(),void dn();t=document.getElementById("clear-button"),ln(t),function(e){var n,t=sn(document.getElementsByClassName("project"));try{for(t.s();!(n=t.n()).done;){var a=n.value;e.includes(a.id)?ln(a):An(a)}}catch(e){t.e(e)}finally{t.f()}}(function(e){switch(function(e){return null!=M[e]?Ke.STATUS:null!=n[e]?Ke.LANGUAGE:null!=N[e]?Ke.TAGS:Ke.GENERAL}(e)){case Ke.STATUS:return en(tn,e);case Ke.LANGUAGE:return en(an,e);case Ke.TAGS:return en(rn,e);case Ke.GENERAL:default:return en(on,e)}}(a))})),document.getElementById("clear-button").addEventListener("click",(function(){un(),dn()}))}}));var pn=t(379),gn=t.n(pn),mn=t(44);gn()(mn.Z,{insert:"head",singleton:!1}),mn.Z.locals;var hn=t(984);gn()(hn.Z,{insert:"head",singleton:!1}),hn.Z.locals;var fn=t(919);gn()(fn.Z,{insert:"head",singleton:!1}),fn.Z.locals;var Cn=t(324);gn()(Cn.Z,{insert:"head",singleton:!1}),Cn.Z.locals,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,