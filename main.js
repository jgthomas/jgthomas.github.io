/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={44:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var a=t(15),r=t.n(a),i=t(645),o=t.n(i)()(r());o.push([e.id,'html,body{margin:0;padding:0;font-size:16px;font-family:"Chivo",sans-serif;font-family:"Source Sans Pro",sans-serif;background-color:#6495ed}.full-width{width:95%;margin:auto;margin-top:0;background-color:#f5f5f5;border-radius:0 0 2% 2%;padding:1%;margin-bottom:2%;font-weight:400}nav{text-align:center;margin-top:2em}nav a{text-decoration:none;outline:none;color:dimgray;padding:1%}.key-grid{display:grid;grid-template-columns:1fr;grid-template-rows:1fr;grid-column-gap:1%;align-items:center;justify-items:center;justify-content:space-evenly;text-align:center;margin-top:1em}.key-items{display:flex;flex-direction:row;justify-content:space-around;color:#2f4f4f;text-align:center;width:100%;margin-top:1em}.hidden{position:absolute;overflow:hidden;clip:rect(0 0 0 0);height:1px;width:1px;margin:-1px;padding:0;border:0}.heading{text-align:center;font-weight:400;margin-bottom:0;color:#1e90ff}.profile-text{color:dimgray;min-width:80%;max-width:80%;margin:auto;text-align:left}@media only screen and (min-width: 768px){.full-width{width:80%}}@media only screen and (min-width: 1024px){.full-width{width:90%}.profile-text{min-width:60%;max-width:60%}}@media only screen and (min-width: 1680px){.full-width{width:60%}}@media only screen and (min-width: 2560px){.full-width{width:45%}}nav a:hover{color:#1e90ff}',"",{version:3,sources:["webpack://./src/scss/index.scss","webpack://./src/scss/_variables.scss","webpack://./src/scss/_layouts.scss"],names:[],mappings:"AAGA,UAEE,QAAA,CACA,SAAA,CACA,cAAA,CACA,8BAAA,CACA,wCAAA,CACA,wBCVsB,CDaxB,YACE,SAAA,CACA,WAAA,CACA,YAAA,CACA,wBChBqB,CDiBrB,uBAAA,CACA,UAAA,CACA,gBAAA,CACA,eAAA,CAGF,IACE,iBAAA,CACA,cAAA,CAEA,MACE,oBAAA,CACA,YAAA,CACA,aC5BkB,CD6BlB,UAAA,CAIJ,UACE,YAAA,CACA,yBAAA,CACA,sBAAA,CACA,kBAAA,CACA,kBAAA,CACA,oBAAA,CACA,4BAAA,CACA,iBAAA,CACA,cAAA,CAGF,WACE,YAAA,CACA,kBAAA,CACA,4BAAA,CACA,aAAA,CACA,iBAAA,CACA,UAAA,CACA,cAAA,CAGF,QACE,iBAAA,CACA,eAAA,CACA,kBAAA,CACA,UAAA,CACA,SAAA,CACA,WAAA,CACA,SAAA,CACA,QAAA,CAGF,SACE,iBAAA,CACA,eAAA,CACA,eAAA,CACA,aCvEc,CD0EhB,cACE,aC1EoB,CD2EpB,aAAA,CACA,aAAA,CACA,WAAA,CACA,eAAA,CE/EE,0CFqFF,YACE,SAAA,CAAA,CEhFA,2CFqFF,YACE,SAAA,CAEF,cACE,aAAA,CACA,aAAA,CAAA,CEpFA,2CFyFF,YACE,SAAA,CAAA,CEpFA,2CFyFF,YACE,SAAA,CAAA,CAQA,YACE,aCrHU",sourcesContent:["@use 'variables';\n@import 'layouts';\n\nhtml,\nbody {\n  margin: 0;\n  padding: 0;\n  font-size: 16px;\n  font-family: 'Chivo', sans-serif;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: variables.$page-background-color;\n}\n\n.full-width {\n  width: 95%;\n  margin: auto;\n  margin-top: 0;\n  background-color: variables.$box-background-color;\n  border-radius: 0 0 2% 2%;\n  padding: 1%;\n  margin-bottom: 2%;\n  font-weight: 400;\n}\n\nnav {\n  text-align: center;\n  margin-top: 2em;\n\n  a {\n    text-decoration: none;\n    outline: none;\n    color: variables.$standard-text-color;\n    padding: 1%;\n  }\n}\n\n.key-grid {\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr;\n  grid-column-gap: 1%;\n  align-items: center;\n  justify-items: center;\n  justify-content: space-evenly;\n  text-align: center;\n  margin-top: 1em;\n}\n\n.key-items {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  color: darkslategrey;\n  text-align: center;\n  width: 100%;\n  margin-top: 1em;\n}\n\n.hidden {\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n}\n\n.heading {\n  text-align: center;\n  font-weight: 400;\n  margin-bottom: 0;\n  color: variables.$heading-color;\n}\n\n.profile-text {\n  color: variables.$standard-text-color;\n  min-width: 80%;\n  max-width: 80%;\n  margin: auto;\n  text-align: left;\n}\n\n/* Assume mobile then apply styles for larger devices */\n\n@include break(tabletPortrait) {\n  .full-width {\n    width: 80%;\n  }\n}\n\n@include break(tabletLandscape) {\n  .full-width {\n    width: 90%;\n  }\n  .profile-text {\n    min-width: 60%;\n    max-width: 60%;\n  }\n}\n\n@include break(desktop) {\n  .full-width {\n    width: 60%;\n  }\n}\n\n@include break(widescreen) {\n  .full-width {\n    width: 45%;\n  }\n}\n\n/* Apply styles based on other features */\n\n@include feature(hover) {\n  nav {\n    a:hover {\n      color: variables.$heading-color;\n    }\n  }\n}\n","$page-background-color: cornflowerblue;\n$box-background-color: whitesmoke;\n$heading-color: dodgerblue;\n$standard-text-color: dimgrey;\n$standard-text-color-dark: darkslategrey;\n$highlight-text-color: cornflowerblue;\n","@mixin break($breakpoint) {\n  @if $breakpoint==tabletPortrait {\n    @media only screen and (min-width: 768px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==tabletLandscape {\n    @media only screen and (min-width: 1024px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==desktop {\n    @media only screen and (min-width: 1680px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==widescreen {\n    @media only screen and (min-width: 2560px) {\n      @content;\n    }\n  }\n}\n\n@mixin feature($feature) {\n  @if $feature==hover {\n    @content;\n  }\n}\n"],sourceRoot:""}]);const s=o},324:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var a=t(15),r=t.n(a),i=t(645),o=t.n(i)()(r());o.push([e.id,".main-grid-me{margin-top:1em;display:grid;grid-template-columns:1fr;grid-template-rows:1fr;grid-row-gap:1%}.lang-intro{margin-bottom:3em}.lang{margin-bottom:2.5em}.language-name{color:tomato}.tool-icon-list{text-align:center}.tool-icon{display:inline-block;margin-left:auto;margin-right:auto}.me-links{display:flex;flex-direction:row;justify-content:space-around}.tooling-title{color:#6495ed}","",{version:3,sources:["webpack://./src/scss/me.scss","webpack://./src/scss/_variables.scss"],names:[],mappings:"AAIA,cACE,cAAA,CACA,YAAA,CACA,yBAAA,CACA,sBAAA,CACA,eAAA,CAGF,YACE,iBAAA,CAGF,MACE,mBAAA,CAGF,eACE,YAnBoB,CAsBtB,gBACE,iBAAA,CAGF,WACE,oBAAA,CACA,gBAAA,CACA,iBAAA,CAGF,UACE,YAAA,CACA,kBAAA,CACA,4BAAA,CAGF,eACE,aCpCqB",sourcesContent:["@use 'variables';\n\n$language-text-color: tomato;\n\n.main-grid-me {\n  margin-top: 1em;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr;\n  grid-row-gap: 1%;\n}\n\n.lang-intro {\n  margin-bottom: 3em;\n}\n\n.lang {\n  margin-bottom: 2.5em;\n}\n\n.language-name {\n  color: $language-text-color;\n}\n\n.tool-icon-list {\n  text-align: center;\n}\n\n.tool-icon {\n  display: inline-block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.me-links {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n}\n\n.tooling-title {\n  color: variables.$highlight-text-color;\n}\n","$page-background-color: cornflowerblue;\n$box-background-color: whitesmoke;\n$heading-color: dodgerblue;\n$standard-text-color: dimgrey;\n$standard-text-color-dark: darkslategrey;\n$highlight-text-color: cornflowerblue;\n"],sourceRoot:""}]);const s=o},984:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var a=t(15),r=t.n(a),i=t(645),o=t.n(i)()(r());o.push([e.id,'.main-grid-project{margin-top:0em;display:grid;grid-template-columns:1fr;grid-template-rows:1fr;grid-row-gap:1%;grid-template-areas:"projects"}.project-grid{display:grid;grid-area:projects;grid-template-columns:1fr;grid-column-gap:1%;align-items:center;justify-items:center;justify-content:space-evenly;min-width:100%;max-width:100%;margin:auto;text-align:center;margin-bottom:1em}.project{display:grid;grid-template-columns:1fr;background-color:#f5f5f5;border-radius:2%;min-width:95%;max-width:95%;margin-top:20px;align-self:stretch}.title-line{display:flex;flex-direction:row;width:90%;margin:auto;justify-content:space-around;margin-top:20px}.status-light{margin-right:auto;font-size:larger;width:10%}.project-title{font-size:150%;margin-right:auto;margin-left:auto;color:#1e90ff}.description{color:dimgray;width:80%;font-size:larger;margin:auto}.detail{font-size:90%}.tech-used{color:dimgray;width:70%;margin:auto;text-align:left;font-size:100%;font-weight:400}.status-line{align-self:end;color:#2f4f4f;font-size:large;margin-top:20px;display:flex;flex-direction:row;justify-content:space-around}.link-image{width:26px}.uses-title{color:#6495ed}.feature-list{width:70%;margin:auto;text-align:left;font-size:90%}.project-image{max-width:50%;height:auto;padding:20px;margin:auto}.active{color:#2dc937}.archived{color:#e7b416}.retired{color:#a9a9a9}@media only screen and (min-width: 768px){.project-grid{min-width:85%;max-width:85%}.feature-list{width:80%}}@media only screen and (min-width: 1024px){.project-grid{min-width:95%;max-width:95%;grid-template-columns:1fr 1fr}}@media only screen and (min-width: 1680px){.project-grid{min-width:65%;max-width:65%}}@media only screen and (min-width: 2560px){.project-grid{min-width:50%;max-width:50%}}',"",{version:3,sources:["webpack://./src/scss/projects.scss","webpack://./src/scss/_variables.scss","webpack://./src/scss/_layouts.scss"],names:[],mappings:"AAOA,mBACE,cAAA,CACA,YAAA,CACA,yBAAA,CACA,sBAAA,CACA,eAAA,CACA,8BAAA,CAGF,cACE,YAAA,CACA,kBAAA,CACA,yBAAA,CACA,kBAAA,CACA,kBAAA,CACA,oBAAA,CACA,4BAAA,CACA,cAAA,CACA,cAAA,CACA,WAAA,CACA,iBAAA,CACA,iBAAA,CAGF,SACE,YAAA,CACA,yBAAA,CACA,wBCjCqB,CDkCrB,gBAAA,CACA,aAAA,CACA,aAAA,CACA,eAAA,CACA,kBAAA,CAGF,YACE,YAAA,CACA,kBAAA,CACA,SAAA,CACA,WAAA,CACA,4BAAA,CACA,eAAA,CAGF,cACE,iBAAA,CACA,gBAAA,CACA,SAAA,CAGF,eACE,cAAA,CACA,iBAAA,CACA,gBAAA,CACA,aC3Dc,CD8DhB,aACE,aC9DoB,CD+DpB,SAAA,CACA,gBAAA,CACA,WAAA,CAGF,QACE,aAAA,CAGF,WACE,aCzEoB,CD0EpB,SAAA,CACA,WAAA,CACA,eAAA,CACA,cAAA,CACA,eAAA,CAGF,aACE,cAAA,CACA,aClFyB,CDmFzB,eAAA,CACA,eAAA,CACA,YAAA,CACA,kBAAA,CACA,4BAAA,CAGF,YACE,UAAA,CAGF,YACE,aC9FqB,CDiGvB,cACE,SAAA,CACA,WAAA,CACA,eAAA,CACA,aAAA,CAGF,eACE,aAAA,CACA,WAAA,CACA,YAAA,CACA,WAAA,CAGF,QACE,aAlHa,CAqHf,UACE,aArHe,CAwHjB,SACE,aAxHc,CEHZ,0CFiIF,cACE,aAAA,CACA,aAAA,CAEF,cACE,SAAA,CAAA,CEhIA,2CFqIF,cACE,aAAA,CACA,aAAA,CACA,6BAAA,CAAA,CElIA,2CFuIF,cACE,aAAA,CACA,aAAA,CAAA,CEnIA,2CFwIF,cACE,aAAA,CACA,aAAA,CAAA",sourcesContent:["@use 'variables';\n@import 'layouts';\n\n$active-color: #2dc937;\n$archived-color: #e7b416;\n$retired-color: darkgray;\n\n.main-grid-project {\n  margin-top: 0em;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr;\n  grid-row-gap: 1%;\n  grid-template-areas: 'projects';\n}\n\n.project-grid {\n  display: grid;\n  grid-area: projects;\n  grid-template-columns: 1fr;\n  grid-column-gap: 1%;\n  align-items: center;\n  justify-items: center;\n  justify-content: space-evenly;\n  min-width: 100%;\n  max-width: 100%;\n  margin: auto;\n  text-align: center;\n  margin-bottom: 1em;\n}\n\n.project {\n  display: grid;\n  grid-template-columns: 1fr;\n  background-color: variables.$box-background-color;\n  border-radius: 2%;\n  min-width: 95%;\n  max-width: 95%;\n  margin-top: 20px;\n  align-self: stretch;\n}\n\n.title-line {\n  display: flex;\n  flex-direction: row;\n  width: 90%;\n  margin: auto;\n  justify-content: space-around;\n  margin-top: 20px;\n}\n\n.status-light {\n  margin-right: auto;\n  font-size: larger;\n  width: 10%;\n}\n\n.project-title {\n  font-size: 150%;\n  margin-right: auto;\n  margin-left: auto;\n  color: variables.$heading-color;\n}\n\n.description {\n  color: variables.$standard-text-color;\n  width: 80%;\n  font-size: larger;\n  margin: auto;\n}\n\n.detail {\n  font-size: 90%;\n}\n\n.tech-used {\n  color: variables.$standard-text-color;\n  width: 70%;\n  margin: auto;\n  text-align: left;\n  font-size: 100%;\n  font-weight: 400;\n}\n\n.status-line {\n  align-self: end;\n  color: variables.$standard-text-color-dark;\n  font-size: large;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n}\n\n.link-image {\n  width: 26px;\n}\n\n.uses-title {\n  color: variables.$highlight-text-color;\n}\n\n.feature-list {\n  width: 70%;\n  margin: auto;\n  text-align: left;\n  font-size: 90%;\n}\n\n.project-image {\n  max-width: 50%;\n  height: auto;\n  padding: 20px;\n  margin: auto;\n}\n\n.active {\n  color: $active-color;\n}\n\n.archived {\n  color: $archived-color;\n}\n\n.retired {\n  color: $retired-color;\n}\n\n/* Assume mobile then apply styles for larger devices */\n\n@include break(tabletPortrait) {\n  .project-grid {\n    min-width: 85%;\n    max-width: 85%;\n  }\n  .feature-list {\n    width: 80%;\n  }\n}\n\n@include break(tabletLandscape) {\n  .project-grid {\n    min-width: 95%;\n    max-width: 95%;\n    grid-template-columns: 1fr 1fr;\n  }\n}\n\n@include break(desktop) {\n  .project-grid {\n    min-width: 65%;\n    max-width: 65%;\n  }\n}\n\n@include break(widescreen) {\n  .project-grid {\n    min-width: 50%;\n    max-width: 50%;\n  }\n}\n","$page-background-color: cornflowerblue;\n$box-background-color: whitesmoke;\n$heading-color: dodgerblue;\n$standard-text-color: dimgrey;\n$standard-text-color-dark: darkslategrey;\n$highlight-text-color: cornflowerblue;\n","@mixin break($breakpoint) {\n  @if $breakpoint==tabletPortrait {\n    @media only screen and (min-width: 768px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==tabletLandscape {\n    @media only screen and (min-width: 1024px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==desktop {\n    @media only screen and (min-width: 1680px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==widescreen {\n    @media only screen and (min-width: 2560px) {\n      @content;\n    }\n  }\n}\n\n@mixin feature($feature) {\n  @if $feature==hover {\n    @content;\n  }\n}\n"],sourceRoot:""}]);const s=o},673:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var a=t(15),r=t.n(a),i=t(645),o=t.n(i)()(r());o.push([e.id,".search-form{display:flex;flex-direction:column;align-content:space-around;width:90%;height:auto;margin:auto;text-align:center}#search-bar{width:75%;padding:20px;font-size:1.15em;margin:auto;display:block;margin-bottom:1.15em;margin-top:1em;color:#6495ed;border-radius:2%;border:none;text-decoration:none}.clear-button{text-decoration:none;padding:5px;font-size:large;border:none;color:tomato;background-color:#f5f5f5;-webkit-appearance:none;border-radius:5px;margin:auto}@media only screen and (min-width: 768px){#search-bar{width:50%}}","",{version:3,sources:["webpack://./src/scss/search.scss","webpack://./src/scss/_variables.scss","webpack://./src/scss/_layouts.scss"],names:[],mappings:"AAKA,aACE,YAAA,CACA,qBAAA,CACA,0BAAA,CACA,SAAA,CACA,WAAA,CACA,WAAA,CACA,iBAAA,CAGF,YACE,SAAA,CACA,YAAA,CACA,gBAAA,CACA,WAAA,CACA,aAAA,CACA,oBAAA,CACA,cAAA,CACA,aClBqB,CDmBrB,gBAAA,CACA,WAAA,CACA,oBAAA,CAGF,cACE,oBAAA,CACA,WAAA,CACA,eAAA,CACA,WAAA,CACA,YA/BiB,CAgCjB,wBClCqB,CDmCrB,uBAAA,CACA,iBAAA,CACA,WAAA,CEpCE,0CF0CF,YACE,SAAA,CAAA",sourcesContent:["@use 'variables';\n@import 'layouts';\n\n$alert-text-color: tomato;\n\n.search-form {\n  display: flex;\n  flex-direction: column;\n  align-content: space-around;\n  width: 90%;\n  height: auto;\n  margin: auto;\n  text-align: center;\n}\n\n#search-bar {\n  width: 75%;\n  padding: 20px;\n  font-size: 1.15em;\n  margin: auto;\n  display: block;\n  margin-bottom: 1.15em;\n  margin-top: 1em;\n  color: variables.$highlight-text-color;\n  border-radius: 2%;\n  border: none;\n  text-decoration: none;\n}\n\n.clear-button {\n  text-decoration: none;\n  padding: 5px;\n  font-size: large;\n  border: none;\n  color: $alert-text-color;\n  background-color: variables.$box-background-color;\n  -webkit-appearance: none;\n  border-radius: 5px;\n  margin: auto;\n}\n\n/* Assume mobile then apply styles for larger devices */\n\n@include break(tabletPortrait) {\n  #search-bar {\n    width: 50%;\n  }\n}\n","$page-background-color: cornflowerblue;\n$box-background-color: whitesmoke;\n$heading-color: dodgerblue;\n$standard-text-color: dimgrey;\n$standard-text-color-dark: darkslategrey;\n$highlight-text-color: cornflowerblue;\n","@mixin break($breakpoint) {\n  @if $breakpoint==tabletPortrait {\n    @media only screen and (min-width: 768px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==tabletLandscape {\n    @media only screen and (min-width: 1024px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==desktop {\n    @media only screen and (min-width: 1680px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==widescreen {\n    @media only screen and (min-width: 2560px) {\n      @content;\n    }\n  }\n}\n\n@mixin feature($feature) {\n  @if $feature==hover {\n    @content;\n  }\n}\n"],sourceRoot:""}]);const s=o},645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,a){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(a)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(r[o]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);a&&r[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),n.push(c))}},n}},15:e=>{"use strict";function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,a=new Array(n);t<n;t++)a[t]=e[t];return a}e.exports=function(e){var t,a,r=(a=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],a=!0,r=!1,i=void 0;try{for(var o,s=e[Symbol.iterator]();!(a=(o=s.next()).done)&&(t.push(o.value),!n||t.length!==n);a=!0);}catch(e){r=!0,i=e}finally{try{a||null==s.return||s.return()}finally{if(r)throw i}}return t}}(t,a)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?n(e,t):void 0}}(t,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[1],o=r[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(c," */"),A=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[i].concat(A).concat([l]).join("\n")}return[i].join("\n")}},466:function(e){e.exports=function(){"use strict";var e=Object.prototype.toString,n=Array.isArray||function(n){return"[object Array]"===e.call(n)};function t(e){return"function"==typeof e}function a(e){return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function r(e,n){return null!=e&&"object"==typeof e&&n in e}var i=RegExp.prototype.test;var o=/\S/;function s(e){return!function(e,n){return i.call(e,n)}(o,e)}var c={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"};var l=/\s*/,A=/\s+/,d=/\s*=/,u=/\s*\}/,p=/#|\^|\/|>|\{|&|=|!/;function g(e){this.string=e,this.tail=e,this.pos=0}function m(e,n){this.view=e,this.cache={".":this.view},this.parent=n}function h(){this.templateCache={_cache:{},set:function(e,n){this._cache[e]=n},get:function(e){return this._cache[e]},clear:function(){this._cache={}}}}g.prototype.eos=function(){return""===this.tail},g.prototype.scan=function(e){var n=this.tail.match(e);if(!n||0!==n.index)return"";var t=n[0];return this.tail=this.tail.substring(t.length),this.pos+=t.length,t},g.prototype.scanUntil=function(e){var n,t=this.tail.search(e);switch(t){case-1:n=this.tail,this.tail="";break;case 0:n="";break;default:n=this.tail.substring(0,t),this.tail=this.tail.substring(t)}return this.pos+=n.length,n},m.prototype.push=function(e){return new m(e,this)},m.prototype.lookup=function(e){var n,a,i,o=this.cache;if(o.hasOwnProperty(e))n=o[e];else{for(var s,c,l,A=this,d=!1;A;){if(e.indexOf(".")>0)for(s=A.view,c=e.split("."),l=0;null!=s&&l<c.length;)l===c.length-1&&(d=r(s,c[l])||(a=s,i=c[l],null!=a&&"object"!=typeof a&&a.hasOwnProperty&&a.hasOwnProperty(i))),s=s[c[l++]];else s=A.view[e],d=r(A.view,e);if(d){n=s;break}A=A.parent}o[e]=n}return t(n)&&(n=n.call(this.view)),n},h.prototype.clearCache=function(){void 0!==this.templateCache&&this.templateCache.clear()},h.prototype.parse=function(e,t){var r=this.templateCache,i=e+":"+(t||f.tags).join(":"),o=void 0!==r,c=o?r.get(i):void 0;return null==c&&(c=function(e,t){if(!e)return[];var r,i,o,c=!1,m=[],h=[],C=[],b=!1,y=!1,w="",v=0;function x(){if(b&&!y)for(;C.length;)delete h[C.pop()];else C=[];b=!1,y=!1}function k(e){if("string"==typeof e&&(e=e.split(A,2)),!n(e)||2!==e.length)throw new Error("Invalid tags: "+e);r=new RegExp(a(e[0])+"\\s*"),i=new RegExp("\\s*"+a(e[1])),o=new RegExp("\\s*"+a("}"+e[1]))}k(t||f.tags);for(var B,E,j,S,L,$,F=new g(e);!F.eos();){if(B=F.pos,j=F.scanUntil(r))for(var I=0,D=j.length;I<D;++I)s(S=j.charAt(I))?(C.push(h.length),w+=S):(y=!0,c=!0,w+=" "),h.push(["text",S,B,B+1]),B+=1,"\n"===S&&(x(),w="",v=0,c=!1);if(!F.scan(r))break;if(b=!0,E=F.scan(p)||"name",F.scan(l),"="===E?(j=F.scanUntil(d),F.scan(d),F.scanUntil(i)):"{"===E?(j=F.scanUntil(o),F.scan(u),F.scanUntil(i),E="&"):j=F.scanUntil(i),!F.scan(i))throw new Error("Unclosed tag at "+F.pos);if(L=">"==E?[E,j,B,F.pos,w,v,c]:[E,j,B,F.pos],v++,h.push(L),"#"===E||"^"===E)m.push(L);else if("/"===E){if(!($=m.pop()))throw new Error('Unopened section "'+j+'" at '+B);if($[1]!==j)throw new Error('Unclosed section "'+$[1]+'" at '+B)}else"name"===E||"{"===E||"&"===E?y=!0:"="===E&&k(j)}if(x(),$=m.pop())throw new Error('Unclosed section "'+$[1]+'" at '+F.pos);return function(e){for(var n,t=[],a=t,r=[],i=0,o=e.length;i<o;++i)switch((n=e[i])[0]){case"#":case"^":a.push(n),r.push(n),a=n[4]=[];break;case"/":r.pop()[5]=n[2],a=r.length>0?r[r.length-1][4]:t;break;default:a.push(n)}return t}(function(e){for(var n,t,a=[],r=0,i=e.length;r<i;++r)(n=e[r])&&("text"===n[0]&&t&&"text"===t[0]?(t[1]+=n[1],t[3]=n[3]):(a.push(n),t=n));return a}(h))}(e,t),o&&r.set(i,c)),c},h.prototype.render=function(e,n,t,a){var r=this.getConfigTags(a),i=this.parse(e,r),o=n instanceof m?n:new m(n,void 0);return this.renderTokens(i,o,t,e,a)},h.prototype.renderTokens=function(e,n,t,a,r){for(var i,o,s,c="",l=0,A=e.length;l<A;++l)s=void 0,"#"===(o=(i=e[l])[0])?s=this.renderSection(i,n,t,a,r):"^"===o?s=this.renderInverted(i,n,t,a,r):">"===o?s=this.renderPartial(i,n,t,r):"&"===o?s=this.unescapedValue(i,n):"name"===o?s=this.escapedValue(i,n,r):"text"===o&&(s=this.rawValue(i)),void 0!==s&&(c+=s);return c},h.prototype.renderSection=function(e,a,r,i,o){var s=this,c="",l=a.lookup(e[1]);if(l){if(n(l))for(var A=0,d=l.length;A<d;++A)c+=this.renderTokens(e[4],a.push(l[A]),r,i,o);else if("object"==typeof l||"string"==typeof l||"number"==typeof l)c+=this.renderTokens(e[4],a.push(l),r,i,o);else if(t(l)){if("string"!=typeof i)throw new Error("Cannot use higher-order sections without the original template");null!=(l=l.call(a.view,i.slice(e[3],e[5]),(function(e){return s.render(e,a,r,o)})))&&(c+=l)}else c+=this.renderTokens(e[4],a,r,i,o);return c}},h.prototype.renderInverted=function(e,t,a,r,i){var o=t.lookup(e[1]);if(!o||n(o)&&0===o.length)return this.renderTokens(e[4],t,a,r,i)},h.prototype.indentPartial=function(e,n,t){for(var a=n.replace(/[^ \t]/g,""),r=e.split("\n"),i=0;i<r.length;i++)r[i].length&&(i>0||!t)&&(r[i]=a+r[i]);return r.join("\n")},h.prototype.renderPartial=function(e,n,a,r){if(a){var i=this.getConfigTags(r),o=t(a)?a(e[1]):a[e[1]];if(null!=o){var s=e[6],c=e[5],l=e[4],A=o;0==c&&l&&(A=this.indentPartial(o,l,s));var d=this.parse(A,i);return this.renderTokens(d,n,a,A,r)}}},h.prototype.unescapedValue=function(e,n){var t=n.lookup(e[1]);if(null!=t)return t},h.prototype.escapedValue=function(e,n,t){var a=this.getConfigEscape(t)||f.escape,r=n.lookup(e[1]);if(null!=r)return"number"==typeof r&&a===f.escape?String(r):a(r)},h.prototype.rawValue=function(e){return e[1]},h.prototype.getConfigTags=function(e){return n(e)?e:e&&"object"==typeof e?e.tags:void 0},h.prototype.getConfigEscape=function(e){return e&&"object"==typeof e&&!n(e)?e.escape:void 0};var f={name:"mustache.js",version:"4.1.0",tags:["{{","}}"],clearCache:void 0,escape:void 0,parse:void 0,render:void 0,Scanner:void 0,Context:void 0,Writer:void 0,set templateCache(e){C.templateCache=e},get templateCache(){return C.templateCache}},C=new h;return f.clearCache=function(){return C.clearCache()},f.parse=function(e,n){return C.parse(e,n)},f.render=function(e,t,a,r){if("string"!=typeof e)throw new TypeError('Invalid template! Template should be a "string" but "'+((n(i=e)?"array":typeof i)+'" was given as the first argument for mustache#render(template, view, partials)'));var i;return C.render(e,t,a,r)},f.escape=function(e){return String(e).replace(/[&<>"'`=\/]/g,(function(e){return c[e]}))},f.Scanner=g,f.Context=m,f.Writer=h,f}()},379:(e,n,t)=>{"use strict";var a,r=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),i=[];function o(e){for(var n=-1,t=0;t<i.length;t++)if(i[t].identifier===e){n=t;break}return n}function s(e,n){for(var t={},a=[],r=0;r<e.length;r++){var s=e[r],c=n.base?s[0]+n.base:s[0],l=t[c]||0,A="".concat(c," ").concat(l);t[c]=l+1;var d=o(A),u={css:s[1],media:s[2],sourceMap:s[3]};-1!==d?(i[d].references++,i[d].updater(u)):i.push({identifier:A,updater:m(u,n),references:1}),a.push(A)}return a}function c(e){var n=document.createElement("style"),a=e.attributes||{};if(void 0===a.nonce){var i=t.nc;i&&(a.nonce=i)}if(Object.keys(a).forEach((function(e){n.setAttribute(e,a[e])})),"function"==typeof e.insert)e.insert(n);else{var o=r(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}return n}var l,A=(l=[],function(e,n){return l[e]=n,l.filter(Boolean).join("\n")});function d(e,n,t,a){var r=t?"":a.media?"@media ".concat(a.media," {").concat(a.css,"}"):a.css;if(e.styleSheet)e.styleSheet.cssText=A(n,r);else{var i=document.createTextNode(r),o=e.childNodes;o[n]&&e.removeChild(o[n]),o.length?e.insertBefore(i,o[n]):e.appendChild(i)}}function u(e,n,t){var a=t.css,r=t.media,i=t.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=a;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(a))}}var p=null,g=0;function m(e,n){var t,a,r;if(n.singleton){var i=g++;t=p||(p=c(n)),a=d.bind(null,t,i,!1),r=d.bind(null,t,i,!0)}else t=c(n),a=u.bind(null,t,n),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return a(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;a(e=n)}else r()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===a&&(a=Boolean(window&&document&&document.all&&!window.atob)),a));var t=s(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var a=0;a<t.length;a++){var r=o(t[a]);i[r].references--}for(var c=s(e,n),l=0;l<t.length;l++){var A=o(t[l]);0===i[A].references&&(i[A].updater(),i.splice(A,1))}t=c}}}}},n={};function t(a){if(n[a])return n[a].exports;var r=n[a]={id:a,exports:{}};return e[a].call(r.exports,r,r.exports,t),r.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var a in n)t.o(n,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:n[a]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var a=n.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),(()=>{"use strict";var e,n="Haskell",a="C",r="Python",i="JavaScript",o="CSS",s="HTML",c="Java",l="Hspec",A="Hlint",d="Ormolu",u="weeder",p="ghcid",g="GDB",m="cmocka",h="Valgrind",f="Flask",C="Flake8",b="Black",y="pytest",w="ESLint",v="Node.js",x="Jest",k="JUnit",B="JaCoCo",E="webpack",j="Babel",S="Sass",L="AWS",$="Lambda",F="API Gateway",I="DynamoDB",D="pre-commit",P="Prettier",T="SQLite",G="Stack",U="Make",W="Poetry",O="Yarn",Y="Maven",M="Travis CI",z="Codecov",N="DigitalOcean",R="NGINX",H="GitHub Actions",_="VS Code";function q(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var V="active",Z="archived",J="retired",Q={ci:!0,name:"succ",description:"Compiler for a subset of C",features:["Multi-pass compiler","Growing C support","x86-64 assembly","Robust error handling","Basic type enforcement"],languageList:[n],toolList:[l,A,d,u,p],buildList:[G,M,z],year:"2019",status:V},X={ci:!0,name:"pyfunctory",description:"Pythonic implementations of functional programming concepts",detail:"Map, filter, reduce, and friends built from generator expressions and list comprehensions",languageList:[r],toolList:[y,C,b],buildList:[W,M,z],year:"2017",status:Z},K={ci:!1,name:"sudoku solver",altName:"sudoku-solver.online",description:"Sudoku solver website.",detail:"The solver itself is written in C, and then compiled to webassembly",languageList:[a,i,o,s],toolList:["WebAssembly"],buildList:["Emscripten"],year:"2018",status:J},ee={ci:!1,name:"headlinewords.top",description:"Site tracking words used in news headlines.",detail:"Daily, weekly, and monthly trends from a range of sources, across multiple countries",languageList:[r,"SQL",o,s],toolList:[f,"Jinja2",T],buildList:["pip",N,R],year:"2017",status:J},ne={ci:!1,name:"piptube",description:"Picture-in-picture wrapper for mpv and youtube-dl",features:["Video and audio","Play video URL","Play search result","Command line jukebox","Config file settings"],languageList:[r],toolList:["youtube-dl","mpv"],buildList:[W],year:"2017",status:Z},te={ci:!0,name:"self.site",ghAction:"deploy",altName:"jgthomas.github.io",description:"Portfolio website",detail:"Responsive site with just the bare-bones tech of the web",languageList:[i,o,s],toolList:["Grid","Flexbox","media queries","{{ mustache }}",w,P,S],buildList:[O,E,j,H,"GitHub Pages"],year:"2019",status:V},ae={ci:!0,name:"calcasm",description:"Command line calculator written in x86-64 assembly",detail:"All input, output, parsing, and calculation performed in pure assembly, with Linux syscalls",languageList:["x86-64 Assembly"],toolList:["as","ld",g],buildList:[U,M],year:"2018",status:Z},re={ci:!0,name:"draughts",altName:"DraughtsGame",description:"Desktop draughts application",features:["Computer player","Save and resume","Graphical mode","Text mode","Swap bewteen modes"],languageList:[c,"SQL"],toolList:["JavaFX",k,T],buildList:[Y,M],year:"2018",status:Z},ie={ci:!0,name:"braingame.xyz",description:"Brain game website",detail:"Anagrams, word games, sudoku, and more to come",languageList:[r,i,o,s],toolList:["FastAPI","React","Docker",y,C,b,w,P,D],buildList:[W,O,M,z,"Docker Hub","AWS Elastic Beanstalk"],year:"2020",status:V},oe={ci:!0,name:"emulator",altName:"chipset_emulator",description:"Emulator for 4- and 8-bit chipsets",features:["Interactive shell","Run program from file","Custom assembly","Simple assembler","Step-through debugger"],languageList:[a],toolList:[m,g,h],buildList:[U,M],year:"2018",status:Z},se={ci:!0,ghAction:"tests",name:"jsoner",description:"JSON Validator",detail:"Built with ".concat("Megaparsec"),languageList:[n],toolList:[l,A,d,u,p],buildList:[G,H,z],year:"2020",status:V},ce={ci:!0,ghAction:"deploy",name:"foodApi",description:"Serverless backend for food app",features:["Food pantry record","Recipe book","Matches recipes to food","Suggests options","Alternate ingredients"],languageList:[i],toolList:[x,v,L,$,F,I,w,P],buildList:["npm",H,"Serverless Framework",z,"Depfu"],year:"2021",status:V},le={ci:!0,name:"dish",description:"Docker clone",detail:"Container management non-solution",features:["Create new containers","Access and use containers","Manage containers"],languageList:["Go"],toolList:["Go Tooling"],buildList:[U,M],year:"2019",status:Z},Ae={ci:!1,name:"playwords.xyz",description:"Word game website",features:["Solve anagrams","Word squares","Scrabble rack"],languageList:[r,i,o,s],toolList:[f],buildList:["pip",N,R],year:"2017",status:J},de=function(e){var n;e.image=(n=e.name,"src/img/".concat(n.replaceAll(" ","_"),".png")),e.languages=e.languageList.join(", "),e.tools=e.toolList.join(", "),e.build=e.buildList.join(", "),e.midlink=function(e){if(!e.ci)return"";var n=e.altName?e.altName:e.name;return e.ghAction?"https://github.com/jgthomas/".concat(n,"/workflows/").concat(e.ghAction,"/badge.svg"):"https://travis-ci.com/jgthomas/".concat(n,".svg?branch=master")}(e),e.github=function(e){var n=e.altName?e.altName:e.name;return"https://github.com/jgthomas/".concat(n)}(e),e.octocat="https://raw.githubusercontent.com/github/explore/78df643247d429f6cc873026c0622819ad797942/topics/github/github.png"};de(Q),de(ie),de(te),de(re),de(oe),de(ae),de(ne),de(X),de(K),de(ee),de(se),de(ce),de(le),de(Ae);var ue,pe=(q(e={},Q.name,Q),q(e,ce.name,ce),q(e,se.name,se),q(e,te.name,te),q(e,le.name,le),q(e,re.name,re),q(e,ae.name,ae),q(e,oe.name,oe),q(e,ne.name,ne),q(e,K.name,K),q(e,Ae.name,Ae),q(e,ee.name,ee),e),ge={projects:Object.keys(pe).map((function(e){return pe[e]}))},me={siteTitle:"The Late Developer",homePage:"index.html",homeTitle:"Projects",mePage:"me.html",meTitle:"Me",cvLink:"https://www.dropbox.com/s/p7sr20jl648jv1k/CV.pdf?dl=0",cvTitle:"CV"};function he(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var fe,Ce="36px",be="src/img",ye={organisation:"Self-teaching",alt:"Self-teaching",width:Ce,image:"".concat(be,"/laptop_man.png"),startDate:"2017",endDate:"forever",role:"Projects, Project, Projects!"},we={organisation:"City of Edinburgh Council",alt:"Edinbrugh Council",width:Ce,image:"".concat(be,"/edinburgh_council.jpg"),startDate:"2017",endDate:"2018",role:"Database and VBA refactor"},ve={organisation:"University of Birmingham",alt:"UoB",width:Ce,image:"".concat(be,"/smallBham.png"),startDate:"2018",endDate:"2019",role:"MSc in Computer Science"},xe={organisation:"codebar.io",alt:"codebar",width:Ce,image:"".concat(be,"/codebar.png"),startDate:"2019",endDate:"2020",role:"Programming Coach"},ke={organisation:"Bluetel",alt:"Bluetel",width:Ce,image:"".concat(be,"/bluetel_solutions.png"),startDate:"2019",endDate:"present",role:"Software Engineer"},Be=(he(ue={},ke.organisation,ke),he(ue,xe.organisation,xe),he(ue,ve.organisation,ve),he(ue,we.organisation,we),he(ue,ye.organisation,ye),ue),Ee={experience:Object.keys(Be).map((function(e){return Be[e]}))};function je(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var Se="36px",Le="https://raw.githubusercontent.com/devicons/devicon/master/icons",$e={name:r,images:[{alt:r,width:Se,icon:"".concat(Le,"/python/python-original.svg")}],text:'My first language! I started using <span class="language-name">'.concat(r,"</span> during my PhD, running multi-agent evolutionary simulations.\n  When I launched myself back into programming a few years later, ").concat(r," was where I began.\n  Taking quizzes in the SoloLearn app was soon followed by making console-based games and spinning up websites using ").concat(f,".\n  I returned to ").concat(r," for the final project of my computer science degree, testing self-adaptive evolutionary algorithms as solvers of the\n  Boolean satisfiability problem (SAT)."),tooling:[W,y,b,C,D,_]},Fe={name:a,images:[{alt:a,width:Se,icon:"".concat(Le,"/c/c-original.svg")}],text:"I tried to learn algorithms and data structures in ".concat(r,", but ").concat(r," just does too much for you. What was the point of this 'linked list',\n  if the ").concat(r,' list was right there? So I switched to <span class="language-name">').concat(a,"</span>, which forced me to grapple with pointers and manual memory management, and to\n  implement things myself that are just part of the standard libraries of other languages. I don't expect I'll ever work in ").concat(a,", but\n  using it has deeply enriched my understanding of other languages and programming in general."),tooling:["GCC",g,h,m,U,"Vim"]},Ie={name:"web",images:[{alt:s,width:Se,icon:"".concat(Le,"/html5/html5-original.svg")},{alt:o,width:Se,icon:"".concat(Le,"/css3/css3-original.svg")},{alt:i,width:Se,icon:"".concat(Le,"/javascript/javascript-original.svg")}],text:'In addition to allowing me to make things other people can <em>see</em>, working with\n  <span class="language-name">'.concat("Web Tech","</span> really opened up 'API thinking' for me, as a complement to the 'algorithmic thinking' of much of my previous explorations.\n  In doing so, it taught me that it was not 'cheating' if I didn't write it all myself, and that enormously powerful things can be created\n  by making smart use existing tools and services, linked and chained together."),tooling:[O,w,P,x,E,j,S,_]},De={name:c,images:[{alt:c,width:Se,icon:"".concat(Le,"/java/java-original.svg")}],text:"The major language of my computer science degree. It still feels slightly absurd that <em>everything</em> has to be a class, and do I really\n  need all that for 'Hello, World!'? But it was this verbose rigidity that really helped drill object-oriented thinking into my brain. More than\n  any other language, <span class=\"language-name\">".concat(c,"</span> made me think consciously about how to create and expose abstractions.\n  Grasping the beauty and power of interfaces was also a pivotal moment in my developement, so I forgive the verbosity in full."),tooling:[Y,k,B,"IntelliJ"]},Pe={name:n,images:[{alt:n,width:Se,icon:"".concat(Le,"/haskell/haskell-original.svg")}],text:'Learning <span class="language-name">'.concat(n,"</span> opened up the entire mental landscape of functional programming for me.\n  Don't really do 'favourites', but if I did, ").concat(n," would be my favourite language.\n  The type system is amazing. Sum types and pattern matching are beautiful&#8212;as is the ability to control how much 'power' a function has, from a simple pure function,\n  to selecting from the hierarchy of functor, applicative, and <strike>burrito</strike> monad."),tooling:[G,l,A,d,p,"Vim"]},Te=function(e){e.tools=e.tooling.join(", ")};Te($e),Te(Fe),Te(Ie),Te(De),Te(Pe);var Ge=(je(fe={},$e.name,$e),je(fe,Fe.name,Fe),je(fe,Ie.name,Ie),je(fe,De.name,De),je(fe,Pe.name,Pe),fe),Ue={languages:Object.keys(Ge).map((function(e){return Ge[e]}))},We=t(466),Oe=t.n(We),Ye=function(e,n,t){fetch("".concat("./src/templates","/").concat(e).concat(".mst")).then((function(e){return e.text()})).then((function(e){var a=Oe().render(e,n);document.getElementById(t).innerHTML=a})).catch((function(n){return console.log("Unable to load template: ".concat(e,". Error: ").concat(n.message))}))};function Me(e,n){var t;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(t=function(e,n){if(e){if("string"==typeof e)return ze(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ze(e,n):void 0}}(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var a=0,r=function(){};return{s:r,n:function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,s=!1;return{s:function(){t=e[Symbol.iterator]()},n:function(){var e=t.next();return o=e.done,e},e:function(e){s=!0,i=e},f:function(){try{o||null==t.return||t.return()}finally{if(s)throw i}}}}function ze(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,a=new Array(n);t<n;t++)a[t]=e[t];return a}document.addEventListener("DOMContentLoaded",(function(){document.getElementById("project-page")&&(Ye("header",me,"site-header"),Ye("project",ge,"all-projects")),document.getElementById("me-page")&&(Ye("header",me,"site-header"),Ye("experience",Ee,"experience"),Ye("language",Ue,"languages"))}));var Ne=function(e){e.classList.remove("hidden")},Re=function(e){e.classList.add("hidden")},He=function(){var e=document.getElementById("clear-button");Re(e)},_e=function(){var e=document.getElementById("clear-button");Ne(e)},qe=function(){var e,n=Me(document.getElementsByClassName("project"));try{for(n.s();!(e=n.n()).done;){var t=e.value;Ne(t)}}catch(e){n.e(e)}finally{n.f()}};document.addEventListener("DOMContentLoaded",(function(){if(document.getElementById("project-page")){document.getElementById("search-form").addEventListener("submit",(function(e){e.preventDefault(),e.stopPropagation()}));var e=document.getElementById("search-bar");e.addEventListener("input",(function(){var n=e.value.toLowerCase().trim();n?function(e){return e===V||e===Z||e===J}(n)?(_e(),function(e){var n,t,a=Me(document.getElementsByClassName("project"));try{for(a.s();!(n=a.n()).done;){var r=n.value;t=r.id,pe[t].status===e?Ne(r):Re(r)}}catch(e){a.e(e)}finally{a.f()}}(n)):(_e(),function(e){var n,t,a,r,i,o=Me(document.getElementsByClassName("project"));try{for(o.s();!(n=o.n()).done;){var s=n.value;(t=s.id,a=void 0,r=void 0,i=void 0,a=pe[t],r=a.detail?a.detail:"",i=a.features?a.features.join(", "):"","".concat(a.name,"\n            ").concat(a.description,"\n            ").concat(r,"\n            ").concat(i,"\n            ").concat(a.languages,"\n            ").concat(a.tools,"\n            ").concat(a.build,"\n            ").concat(a.year,"\n            ").concat(a.status,"\n           ").toLowerCase()).indexOf(e)>-1?Ne(s):Re(s)}}catch(e){o.e(e)}finally{o.f()}}(n)):(qe(),He())})),document.getElementById("clear-button").addEventListener("click",(function(){qe(),He()}))}}));var Ve=t(379),Ze=t.n(Ve),Je=t(44);Ze()(Je.Z,{insert:"head",singleton:!1}),Je.Z.locals;var Qe=t(984);Ze()(Qe.Z,{insert:"head",singleton:!1}),Qe.Z.locals;var Xe=t(673);Ze()(Xe.Z,{insert:"head",singleton:!1}),Xe.Z.locals;var Ke=t(324);Ze()(Ke.Z,{insert:"head",singleton:!1}),Ke.Z.locals,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,