/*! For license information please see main.js.LICENSE.txt */
(()=>{var n={424:(n,e,t)=>{"use strict";t.d(e,{Z:()=>s});var i=t(15),a=t.n(i),r=t(645),o=t.n(r)()(a());o.push([n.id,"html,\nbody {\n  margin: 0;\n  padding: 0;\n  font-size: 16px;\n  font-family: 'Chivo', sans-serif;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: cornflowerblue;\n  color: whitesmoke;\n}\n\n.full-width {\n  width: 65%;\n  margin: auto;\n  margin-top: 0;\n  background-color: whitesmoke;\n  color: dodgerblue;\n  border-radius: 0 0 2% 2%;\n  padding: 1%;\n  margin-bottom: 2%;\n  font-weight: 400;\n}\n\nnav {\n  text-align: center;\n  margin-top: 2em;\n}\n\n.section-link {\n  text-decoration: none;\n  outline: none;\n  color: dimgrey;\n  padding: 1%;\n}\n\n.search-form {\n  display: flex;\n  flex-direction: column;\n  align-content: space-around;\n  width: 90%;\n  height: auto;\n  margin: auto;\n  text-align: center;\n}\n\n#search-bar {\n  width: 50%;\n  padding: 20px;\n  font-size: 1.15em;\n  margin: auto;\n  display: block;\n  margin-bottom: 1.15em;\n  color: cornflowerblue;\n  border-radius: 2%;\n  border: none;\n  text-decoration: none;\n}\n\n.clear-button {\n  text-decoration: none;\n  padding: 5px;\n  font-size: large;\n  border: none;\n  color: tomato;\n  background-color: whitesmoke;\n  -webkit-appearance: none;\n  border-radius: 5px;\n  margin: auto;\n}\n\n.hidden {\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n}\n\n.heading {\n  text-align: center;\n  font-weight: 400;\n  margin-bottom: 0;\n}\n\n.tagline {\n  text-align: center;\n  font-style: italic;\n  font-weight: 400;\n  font-size: 1em;\n  color: slategrey;\n}\n\n.main-grid {\n  margin-top: 1em;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr;\n  grid-row-gap: 1%;\n  grid-template-areas:\n    'projects'\n    'key';\n}\n\n.main-project-grid {\n  margin-top: 0em;\n}\n\n.project-grid {\n  display: grid;\n  grid-area: projects;\n  grid-template-columns: 1fr 1fr;\n  grid-column-gap: 1%;\n  align-items: center;\n  justify-items: center;\n  justify-content: space-evenly;\n  width: 80%;\n  margin: auto;\n  text-align: center;\n  margin-bottom: 1em;\n}\n\n.key-grid {\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr;\n  grid-column-gap: 1%;\n  align-items: center;\n  justify-items: center;\n  justify-content: space-evenly;\n  text-align: center;\n  margin-top: 1em;\n}\n\n.key-items {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  color: darkslategrey;\n  text-align: center;\n  width: 100%;\n}\n\n.project {\n  display: grid;\n  grid-template-columns: 1fr;\n  background-color: whitesmoke;\n  color: cornflowerblue;\n  border-radius: 2%;\n  min-width: 95%;\n  max-width: 95%;\n  margin-top: 20px;\n  align-self: stretch;\n}\n\n.title-line {\n  display: flex;\n  flex-direction: row;\n  width: 90%;\n  margin: auto;\n  justify-content: space-around;\n  margin-top: 20px;\n}\n\n.status-light {\n  margin-right: auto;\n  font-size: larger;\n  width: 10%;\n}\n\n.project-title {\n  font-size: 150%;\n  margin-right: auto;\n  margin-left: auto;\n}\n\n.description {\n  color: dimgrey;\n  width: 80%;\n  font-size: larger;\n  margin: auto;\n}\n\n.detail {\n  font-size: 90%;\n}\n\n.tech-used {\n  color: dimgrey;\n  width: 70%;\n  margin: auto;\n  text-align: left;\n  font-size: 100%;\n  font-weight: 400;\n}\n\n.status-line {\n  align-self: end;\n  color: darkslategrey;\n  font-size: large;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n}\n\n.link-image {\n  width: 26px;\n}\n\n.uses-title {\n  color: cornflowerblue;\n}\n\n.feature-list {\n  width: 50%;\n  margin: auto;\n  text-align: left;\n  font-size: 90%;\n}\n\n.project-image {\n  max-width: 50%;\n  height: auto;\n  padding: 20px;\n  margin: auto;\n}\n\n.profile-text {\n  color: dimgrey;\n  min-width: 80%;\n  max-width: 80%;\n  margin: auto;\n  text-align: left;\n}\n\n.lang-intro {\n  margin-bottom: 3em;\n}\n\n.lang {\n  margin-bottom: 2.5em;\n}\n\n.tool-icon-list {\n  text-align: center;\n}\n\n.tool-icon {\n  display: inline-block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.active {\n  color: #2dc937;\n}\n\n.archived {\n  color: #e7b416;\n}\n\n.retired {\n  color: darkgray;\n}\n\n.me-links {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n}\n\n/*\n ##Device = absurdly large monitors\n*/\n@media only screen and (min-width: 2450px) {\n  .project-grid {\n    min-width: 50%;\n    max-width: 50%;\n  }\n  .full-width {\n    width: 45%;\n  }\n  .profile-text {\n    min-width: 60%;\n    max-width: 60%;\n  }\n}\n\n/*\n ##Device = Desktops\n  ##Screen = 1281px to higher resolution desktops\n*/\n@media (min-width: 1281px) {\n  .profile-text {\n    min-width: 60%;\n    max-width: 60%;\n  }\n}\n\n/*\n  ##Device = Laptops, Desktops\n  ##Screen = B/w 1025px to 1280px\n*/\n@media (min-width: 1025px) and (max-width: 1280px) {\n  .project-grid {\n    min-width: 95%;\n    max-width: 95%;\n  }\n  .full-width {\n    width: 90%;\n  }\n  .profile-text {\n    min-width: 60%;\n    max-width: 60%;\n  }\n}\n\n/*\n  ##Device = Tablets, Ipads (portrait)\n  ##Screen = B/w 768px to 1024px\n*/\n@media (min-width: 768px) and (max-width: 1024px) {\n  .project-grid {\n    min-width: 95%;\n    max-width: 95%;\n    grid-template-columns: 1fr;\n  }\n  .project {\n    min-width: 80%;\n    max-width: 80%;\n  }\n  .full-width {\n    width: 75%;\n  }\n}\n\n/*\n  ##Device = Tablets, Ipads (landscape)\n  ##Screen = B/w 768px to 1024px\n*/\n@media (min-width: 768px) and (max-width: 1024px) and (orientation: landscape) {\n  .project-grid {\n    min-width: 95%;\n    max-width: 95%;\n    grid-template-columns: 1fr;\n  }\n  .full-width {\n    width: 90%;\n  }\n  .feature-list {\n    width: 80%;\n  }\n}\n\n/*\n  ##Device = Low Resolution Tablets, Mobiles (Landscape)\n  ##Screen = B/w 481px to 767px\n*/\n@media (min-width: 481px) and (max-width: 767px) {\n  .project-grid {\n    min-width: 100%;\n    max-width: 100%;\n    grid-template-columns: 1fr;\n  }\n  .project {\n    min-width: 95%;\n    max-width: 95%;\n  }\n  .full-width {\n    width: 95%;\n  }\n  .feature-list {\n    width: 70%;\n  }\n}\n\n/*\n  ##Device = Most of the Smartphones Mobiles (Portrait)\n  ##Screen = B/w 320px to 479px\n*/\n@media (min-width: 320px) and (max-width: 480px) {\n  .project-grid {\n    min-width: 100%;\n    max-width: 100%;\n    grid-template-columns: 1fr;\n  }\n  .project {\n    min-width: 95%;\n    max-width: 95%;\n  }\n  .full-width {\n    width: 95%;\n  }\n  .feature-list {\n    width: 70%;\n  }\n  #search-bar {\n    width: 75%;\n    margin-top: 1em;\n  }\n}\n\n/*\n ##Device = very small phones\n */\n@media (min-width: 320px) and (max-width: 401px) {\n  .project-grid {\n    min-width: 100%;\n    max-width: 100%;\n    grid-template-columns: 1fr;\n  }\n  .project {\n    min-width: 90%;\n    max-width: 90%;\n  }\n  .full-width {\n    width: 90%;\n  }\n  .feature-list {\n    width: 80%;\n  }\n  #search-bar {\n    width: 75%;\n    margin-top: 1em;\n  }\n}\n\n@media (hover: hover) {\n  .section-link:hover {\n    color: dodgerblue;\n  }\n}\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"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CF;;AAEA;;;CAGC;AACD;EACE;IACE,cAAc;IACd,cAAc;EAChB;AACF;;AAEA;;;CAGC;AACD;EACE;IACE,cAAc;IACd,cAAc;EAChB;EACA;IACE,UAAU;EACZ;EACA;IACE,cAAc;IACd,cAAc;EAChB;AACF;;AAEA;;;CAGC;AACD;EACE;IACE,cAAc;IACd,cAAc;IACd,0BAA0B;EAC5B;EACA;IACE,cAAc;IACd,cAAc;EAChB;EACA;IACE,UAAU;EACZ;AACF;;AAEA;;;CAGC;AACD;EACE;IACE,cAAc;IACd,cAAc;IACd,0BAA0B;EAC5B;EACA;IACE,UAAU;EACZ;EACA;IACE,UAAU;EACZ;AACF;;AAEA;;;CAGC;AACD;EACE;IACE,eAAe;IACf,eAAe;IACf,0BAA0B;EAC5B;EACA;IACE,cAAc;IACd,cAAc;EAChB;EACA;IACE,UAAU;EACZ;EACA;IACE,UAAU;EACZ;AACF;;AAEA;;;CAGC;AACD;EACE;IACE,eAAe;IACf,eAAe;IACf,0BAA0B;EAC5B;EACA;IACE,cAAc;IACd,cAAc;EAChB;EACA;IACE,UAAU;EACZ;EACA;IACE,UAAU;EACZ;EACA;IACE,UAAU;IACV,eAAe;EACjB;AACF;;AAEA;;EAEE;AACF;EACE;IACE,eAAe;IACf,eAAe;IACf,0BAA0B;EAC5B;EACA;IACE,cAAc;IACd,cAAc;EAChB;EACA;IACE,UAAU;EACZ;EACA;IACE,UAAU;EACZ;EACA;IACE,UAAU;IACV,eAAe;EACjB;AACF;;AAEA;EACE;IACE,iBAAiB;EACnB;AACF",sourcesContent:["html,\nbody {\n  margin: 0;\n  padding: 0;\n  font-size: 16px;\n  font-family: 'Chivo', sans-serif;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: cornflowerblue;\n  color: whitesmoke;\n}\n\n.full-width {\n  width: 65%;\n  margin: auto;\n  margin-top: 0;\n  background-color: whitesmoke;\n  color: dodgerblue;\n  border-radius: 0 0 2% 2%;\n  padding: 1%;\n  margin-bottom: 2%;\n  font-weight: 400;\n}\n\nnav {\n  text-align: center;\n  margin-top: 2em;\n}\n\n.section-link {\n  text-decoration: none;\n  outline: none;\n  color: dimgrey;\n  padding: 1%;\n}\n\n.search-form {\n  display: flex;\n  flex-direction: column;\n  align-content: space-around;\n  width: 90%;\n  height: auto;\n  margin: auto;\n  text-align: center;\n}\n\n#search-bar {\n  width: 50%;\n  padding: 20px;\n  font-size: 1.15em;\n  margin: auto;\n  display: block;\n  margin-bottom: 1.15em;\n  color: cornflowerblue;\n  border-radius: 2%;\n  border: none;\n  text-decoration: none;\n}\n\n.clear-button {\n  text-decoration: none;\n  padding: 5px;\n  font-size: large;\n  border: none;\n  color: tomato;\n  background-color: whitesmoke;\n  -webkit-appearance: none;\n  border-radius: 5px;\n  margin: auto;\n}\n\n.hidden {\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n}\n\n.heading {\n  text-align: center;\n  font-weight: 400;\n  margin-bottom: 0;\n}\n\n.tagline {\n  text-align: center;\n  font-style: italic;\n  font-weight: 400;\n  font-size: 1em;\n  color: slategrey;\n}\n\n.main-grid {\n  margin-top: 1em;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr;\n  grid-row-gap: 1%;\n  grid-template-areas:\n    'projects'\n    'key';\n}\n\n.main-project-grid {\n  margin-top: 0em;\n}\n\n.project-grid {\n  display: grid;\n  grid-area: projects;\n  grid-template-columns: 1fr 1fr;\n  grid-column-gap: 1%;\n  align-items: center;\n  justify-items: center;\n  justify-content: space-evenly;\n  width: 80%;\n  margin: auto;\n  text-align: center;\n  margin-bottom: 1em;\n}\n\n.key-grid {\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr;\n  grid-column-gap: 1%;\n  align-items: center;\n  justify-items: center;\n  justify-content: space-evenly;\n  text-align: center;\n  margin-top: 1em;\n}\n\n.key-items {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  color: darkslategrey;\n  text-align: center;\n  width: 100%;\n}\n\n.project {\n  display: grid;\n  grid-template-columns: 1fr;\n  background-color: whitesmoke;\n  color: cornflowerblue;\n  border-radius: 2%;\n  min-width: 95%;\n  max-width: 95%;\n  margin-top: 20px;\n  align-self: stretch;\n}\n\n.title-line {\n  display: flex;\n  flex-direction: row;\n  width: 90%;\n  margin: auto;\n  justify-content: space-around;\n  margin-top: 20px;\n}\n\n.status-light {\n  margin-right: auto;\n  font-size: larger;\n  width: 10%;\n}\n\n.project-title {\n  font-size: 150%;\n  margin-right: auto;\n  margin-left: auto;\n}\n\n.description {\n  color: dimgrey;\n  width: 80%;\n  font-size: larger;\n  margin: auto;\n}\n\n.detail {\n  font-size: 90%;\n}\n\n.tech-used {\n  color: dimgrey;\n  width: 70%;\n  margin: auto;\n  text-align: left;\n  font-size: 100%;\n  font-weight: 400;\n}\n\n.status-line {\n  align-self: end;\n  color: darkslategrey;\n  font-size: large;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n}\n\n.link-image {\n  width: 26px;\n}\n\n.uses-title {\n  color: cornflowerblue;\n}\n\n.feature-list {\n  width: 50%;\n  margin: auto;\n  text-align: left;\n  font-size: 90%;\n}\n\n.project-image {\n  max-width: 50%;\n  height: auto;\n  padding: 20px;\n  margin: auto;\n}\n\n.profile-text {\n  color: dimgrey;\n  min-width: 80%;\n  max-width: 80%;\n  margin: auto;\n  text-align: left;\n}\n\n.lang-intro {\n  margin-bottom: 3em;\n}\n\n.lang {\n  margin-bottom: 2.5em;\n}\n\n.tool-icon-list {\n  text-align: center;\n}\n\n.tool-icon {\n  display: inline-block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.active {\n  color: #2dc937;\n}\n\n.archived {\n  color: #e7b416;\n}\n\n.retired {\n  color: darkgray;\n}\n\n.me-links {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n}\n\n/*\n ##Device = absurdly large monitors\n*/\n@media only screen and (min-width: 2450px) {\n  .project-grid {\n    min-width: 50%;\n    max-width: 50%;\n  }\n  .full-width {\n    width: 45%;\n  }\n  .profile-text {\n    min-width: 60%;\n    max-width: 60%;\n  }\n}\n\n/*\n ##Device = Desktops\n  ##Screen = 1281px to higher resolution desktops\n*/\n@media (min-width: 1281px) {\n  .profile-text {\n    min-width: 60%;\n    max-width: 60%;\n  }\n}\n\n/*\n  ##Device = Laptops, Desktops\n  ##Screen = B/w 1025px to 1280px\n*/\n@media (min-width: 1025px) and (max-width: 1280px) {\n  .project-grid {\n    min-width: 95%;\n    max-width: 95%;\n  }\n  .full-width {\n    width: 90%;\n  }\n  .profile-text {\n    min-width: 60%;\n    max-width: 60%;\n  }\n}\n\n/*\n  ##Device = Tablets, Ipads (portrait)\n  ##Screen = B/w 768px to 1024px\n*/\n@media (min-width: 768px) and (max-width: 1024px) {\n  .project-grid {\n    min-width: 95%;\n    max-width: 95%;\n    grid-template-columns: 1fr;\n  }\n  .project {\n    min-width: 80%;\n    max-width: 80%;\n  }\n  .full-width {\n    width: 75%;\n  }\n}\n\n/*\n  ##Device = Tablets, Ipads (landscape)\n  ##Screen = B/w 768px to 1024px\n*/\n@media (min-width: 768px) and (max-width: 1024px) and (orientation: landscape) {\n  .project-grid {\n    min-width: 95%;\n    max-width: 95%;\n    grid-template-columns: 1fr;\n  }\n  .full-width {\n    width: 90%;\n  }\n  .feature-list {\n    width: 80%;\n  }\n}\n\n/*\n  ##Device = Low Resolution Tablets, Mobiles (Landscape)\n  ##Screen = B/w 481px to 767px\n*/\n@media (min-width: 481px) and (max-width: 767px) {\n  .project-grid {\n    min-width: 100%;\n    max-width: 100%;\n    grid-template-columns: 1fr;\n  }\n  .project {\n    min-width: 95%;\n    max-width: 95%;\n  }\n  .full-width {\n    width: 95%;\n  }\n  .feature-list {\n    width: 70%;\n  }\n}\n\n/*\n  ##Device = Most of the Smartphones Mobiles (Portrait)\n  ##Screen = B/w 320px to 479px\n*/\n@media (min-width: 320px) and (max-width: 480px) {\n  .project-grid {\n    min-width: 100%;\n    max-width: 100%;\n    grid-template-columns: 1fr;\n  }\n  .project {\n    min-width: 95%;\n    max-width: 95%;\n  }\n  .full-width {\n    width: 95%;\n  }\n  .feature-list {\n    width: 70%;\n  }\n  #search-bar {\n    width: 75%;\n    margin-top: 1em;\n  }\n}\n\n/*\n ##Device = very small phones\n */\n@media (min-width: 320px) and (max-width: 401px) {\n  .project-grid {\n    min-width: 100%;\n    max-width: 100%;\n    grid-template-columns: 1fr;\n  }\n  .project {\n    min-width: 90%;\n    max-width: 90%;\n  }\n  .full-width {\n    width: 90%;\n  }\n  .feature-list {\n    width: 80%;\n  }\n  #search-bar {\n    width: 75%;\n    margin-top: 1em;\n  }\n}\n\n@media (hover: hover) {\n  .section-link:hover {\n    color: dodgerblue;\n  }\n}\n"],sourceRoot:""}]);const s=o},645:n=>{"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,i){"string"==typeof n&&(n=[[null,n,""]]);var a={};if(i)for(var r=0;r<this.length;r++){var o=this[r][0];null!=o&&(a[o]=!0)}for(var s=0;s<n.length;s++){var c=[].concat(n[s]);i&&a[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),e.push(c))}},e}},15:n=>{"use strict";function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,i=new Array(e);t<e;t++)i[t]=n[t];return i}n.exports=function(n){var t,i,a=(i=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(n)){var t=[],i=!0,a=!1,r=void 0;try{for(var o,s=n[Symbol.iterator]();!(i=(o=s.next()).done)&&(t.push(o.value),!e||t.length!==e);i=!0);}catch(n){a=!0,r=n}finally{try{i||null==s.return||s.return()}finally{if(a)throw r}}return t}}(t,i)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var i=Object.prototype.toString.call(n).slice(8,-1);return"Object"===i&&n.constructor&&(i=n.constructor.name),"Map"===i||"Set"===i?Array.from(n):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?e(n,t):void 0}}(t,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=a[1],o=a[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(c," */"),A=o.sources.map((function(n){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(n," */")}));return[r].concat(A).concat([l]).join("\n")}return[r].join("\n")}},466:function(n){n.exports=function(){"use strict";var n=Object.prototype.toString,e=Array.isArray||function(e){return"[object Array]"===n.call(e)};function t(n){return"function"==typeof n}function i(n){return n.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function a(n,e){return null!=n&&"object"==typeof n&&e in n}var r=RegExp.prototype.test;var o=/\S/;function s(n){return!function(n,e){return r.call(n,e)}(o,n)}var c={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"};var l=/\s*/,A=/\s+/,d=/\s*=/,u=/\s*\}/,m=/#|\^|\/|>|\{|&|=|!/;function p(n){this.string=n,this.tail=n,this.pos=0}function g(n,e){this.view=n,this.cache={".":this.view},this.parent=e}function h(){this.templateCache={_cache:{},set:function(n,e){this._cache[n]=e},get:function(n){return this._cache[n]},clear:function(){this._cache={}}}}p.prototype.eos=function(){return""===this.tail},p.prototype.scan=function(n){var e=this.tail.match(n);if(!e||0!==e.index)return"";var t=e[0];return this.tail=this.tail.substring(t.length),this.pos+=t.length,t},p.prototype.scanUntil=function(n){var e,t=this.tail.search(n);switch(t){case-1:e=this.tail,this.tail="";break;case 0:e="";break;default:e=this.tail.substring(0,t),this.tail=this.tail.substring(t)}return this.pos+=e.length,e},g.prototype.push=function(n){return new g(n,this)},g.prototype.lookup=function(n){var e,i,r,o=this.cache;if(o.hasOwnProperty(n))e=o[n];else{for(var s,c,l,A=this,d=!1;A;){if(n.indexOf(".")>0)for(s=A.view,c=n.split("."),l=0;null!=s&&l<c.length;)l===c.length-1&&(d=a(s,c[l])||(i=s,r=c[l],null!=i&&"object"!=typeof i&&i.hasOwnProperty&&i.hasOwnProperty(r))),s=s[c[l++]];else s=A.view[n],d=a(A.view,n);if(d){e=s;break}A=A.parent}o[n]=e}return t(e)&&(e=e.call(this.view)),e},h.prototype.clearCache=function(){void 0!==this.templateCache&&this.templateCache.clear()},h.prototype.parse=function(n,t){var a=this.templateCache,r=n+":"+(t||f.tags).join(":"),o=void 0!==a,c=o?a.get(r):void 0;return null==c&&(c=function(n,t){if(!n)return[];var a,r,o,c=!1,g=[],h=[],C=[],E=!1,w=!1,B="",y=0;function b(){if(E&&!w)for(;C.length;)delete h[C.pop()];else C=[];E=!1,w=!1}function v(n){if("string"==typeof n&&(n=n.split(A,2)),!e(n)||2!==n.length)throw new Error("Invalid tags: "+n);a=new RegExp(i(n[0])+"\\s*"),r=new RegExp("\\s*"+i(n[1])),o=new RegExp("\\s*"+i("}"+n[1]))}v(t||f.tags);for(var x,k,j,I,S,L,U=new p(n);!U.eos();){if(x=U.pos,j=U.scanUntil(a))for(var D=0,T=j.length;D<T;++D)s(I=j.charAt(D))?(C.push(h.length),B+=I):(w=!0,c=!0,B+=" "),h.push(["text",I,x,x+1]),x+=1,"\n"===I&&(b(),B="",y=0,c=!1);if(!U.scan(a))break;if(E=!0,k=U.scan(m)||"name",U.scan(l),"="===k?(j=U.scanUntil(d),U.scan(d),U.scanUntil(r)):"{"===k?(j=U.scanUntil(o),U.scan(u),U.scanUntil(r),k="&"):j=U.scanUntil(r),!U.scan(r))throw new Error("Unclosed tag at "+U.pos);if(S=">"==k?[k,j,x,U.pos,B,y,c]:[k,j,x,U.pos],y++,h.push(S),"#"===k||"^"===k)g.push(S);else if("/"===k){if(!(L=g.pop()))throw new Error('Unopened section "'+j+'" at '+x);if(L[1]!==j)throw new Error('Unclosed section "'+L[1]+'" at '+x)}else"name"===k||"{"===k||"&"===k?w=!0:"="===k&&v(j)}if(b(),L=g.pop())throw new Error('Unclosed section "'+L[1]+'" at '+U.pos);return function(n){for(var e,t=[],i=t,a=[],r=0,o=n.length;r<o;++r)switch((e=n[r])[0]){case"#":case"^":i.push(e),a.push(e),i=e[4]=[];break;case"/":a.pop()[5]=e[2],i=a.length>0?a[a.length-1][4]:t;break;default:i.push(e)}return t}(function(n){for(var e,t,i=[],a=0,r=n.length;a<r;++a)(e=n[a])&&("text"===e[0]&&t&&"text"===t[0]?(t[1]+=e[1],t[3]=e[3]):(i.push(e),t=e));return i}(h))}(n,t),o&&a.set(r,c)),c},h.prototype.render=function(n,e,t,i){var a=this.getConfigTags(i),r=this.parse(n,a),o=e instanceof g?e:new g(e,void 0);return this.renderTokens(r,o,t,n,i)},h.prototype.renderTokens=function(n,e,t,i,a){for(var r,o,s,c="",l=0,A=n.length;l<A;++l)s=void 0,"#"===(o=(r=n[l])[0])?s=this.renderSection(r,e,t,i,a):"^"===o?s=this.renderInverted(r,e,t,i,a):">"===o?s=this.renderPartial(r,e,t,a):"&"===o?s=this.unescapedValue(r,e):"name"===o?s=this.escapedValue(r,e,a):"text"===o&&(s=this.rawValue(r)),void 0!==s&&(c+=s);return c},h.prototype.renderSection=function(n,i,a,r,o){var s=this,c="",l=i.lookup(n[1]);if(l){if(e(l))for(var A=0,d=l.length;A<d;++A)c+=this.renderTokens(n[4],i.push(l[A]),a,r,o);else if("object"==typeof l||"string"==typeof l||"number"==typeof l)c+=this.renderTokens(n[4],i.push(l),a,r,o);else if(t(l)){if("string"!=typeof r)throw new Error("Cannot use higher-order sections without the original template");null!=(l=l.call(i.view,r.slice(n[3],n[5]),(function(n){return s.render(n,i,a,o)})))&&(c+=l)}else c+=this.renderTokens(n[4],i,a,r,o);return c}},h.prototype.renderInverted=function(n,t,i,a,r){var o=t.lookup(n[1]);if(!o||e(o)&&0===o.length)return this.renderTokens(n[4],t,i,a,r)},h.prototype.indentPartial=function(n,e,t){for(var i=e.replace(/[^ \t]/g,""),a=n.split("\n"),r=0;r<a.length;r++)a[r].length&&(r>0||!t)&&(a[r]=i+a[r]);return a.join("\n")},h.prototype.renderPartial=function(n,e,i,a){if(i){var r=this.getConfigTags(a),o=t(i)?i(n[1]):i[n[1]];if(null!=o){var s=n[6],c=n[5],l=n[4],A=o;0==c&&l&&(A=this.indentPartial(o,l,s));var d=this.parse(A,r);return this.renderTokens(d,e,i,A,a)}}},h.prototype.unescapedValue=function(n,e){var t=e.lookup(n[1]);if(null!=t)return t},h.prototype.escapedValue=function(n,e,t){var i=this.getConfigEscape(t)||f.escape,a=e.lookup(n[1]);if(null!=a)return"number"==typeof a&&i===f.escape?String(a):i(a)},h.prototype.rawValue=function(n){return n[1]},h.prototype.getConfigTags=function(n){return e(n)?n:n&&"object"==typeof n?n.tags:void 0},h.prototype.getConfigEscape=function(n){return n&&"object"==typeof n&&!e(n)?n.escape:void 0};var f={name:"mustache.js",version:"4.1.0",tags:["{{","}}"],clearCache:void 0,escape:void 0,parse:void 0,render:void 0,Scanner:void 0,Context:void 0,Writer:void 0,set templateCache(n){C.templateCache=n},get templateCache(){return C.templateCache}},C=new h;return f.clearCache=function(){return C.clearCache()},f.parse=function(n,e){return C.parse(n,e)},f.render=function(n,t,i,a){if("string"!=typeof n)throw new TypeError('Invalid template! Template should be a "string" but "'+((e(r=n)?"array":typeof r)+'" was given as the first argument for mustache#render(template, view, partials)'));var r;return C.render(n,t,i,a)},f.escape=function(n){return String(n).replace(/[&<>"'`=\/]/g,(function(n){return c[n]}))},f.Scanner=p,f.Context=g,f.Writer=h,f}()},379:(n,e,t)=>{"use strict";var i,a=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),r=[];function o(n){for(var e=-1,t=0;t<r.length;t++)if(r[t].identifier===n){e=t;break}return e}function s(n,e){for(var t={},i=[],a=0;a<n.length;a++){var s=n[a],c=e.base?s[0]+e.base:s[0],l=t[c]||0,A="".concat(c," ").concat(l);t[c]=l+1;var d=o(A),u={css:s[1],media:s[2],sourceMap:s[3]};-1!==d?(r[d].references++,r[d].updater(u)):r.push({identifier:A,updater:g(u,e),references:1}),i.push(A)}return i}function c(n){var e=document.createElement("style"),i=n.attributes||{};if(void 0===i.nonce){var r=t.nc;r&&(i.nonce=r)}if(Object.keys(i).forEach((function(n){e.setAttribute(n,i[n])})),"function"==typeof n.insert)n.insert(e);else{var o=a(n.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}return e}var l,A=(l=[],function(n,e){return l[n]=e,l.filter(Boolean).join("\n")});function d(n,e,t,i){var a=t?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(n.styleSheet)n.styleSheet.cssText=A(e,a);else{var r=document.createTextNode(a),o=n.childNodes;o[e]&&n.removeChild(o[e]),o.length?n.insertBefore(r,o[e]):n.appendChild(r)}}function u(n,e,t){var i=t.css,a=t.media,r=t.sourceMap;if(a?n.setAttribute("media",a):n.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),n.styleSheet)n.styleSheet.cssText=i;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(i))}}var m=null,p=0;function g(n,e){var t,i,a;if(e.singleton){var r=p++;t=m||(m=c(e)),i=d.bind(null,t,r,!1),a=d.bind(null,t,r,!0)}else t=c(e),i=u.bind(null,t,e),a=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return i(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;i(n=e)}else a()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i));var t=s(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var i=0;i<t.length;i++){var a=o(t[i]);r[a].references--}for(var c=s(n,e),l=0;l<t.length;l++){var A=o(t[l]);0===r[A].references&&(r[A].updater(),r.splice(A,1))}t=c}}}}},e={};function t(i){if(e[i])return e[i].exports;var a=e[i]={id:i,exports:{}};return n[i].call(a.exports,a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var i in e)t.o(e,i)&&!t.o(n,i)&&Object.defineProperty(n,i,{enumerable:!0,get:e[i]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var i=e.getElementsByTagName("script");i.length&&(n=i[i.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),(()=>{"use strict";var n,e="Haskell",i="C",a="Python",r="JavaScript",o="CSS",s="HTML",c="Java",l="Hspec",A="Hlint",d="Ormolu",u="weeder",m="ghcid",p="GDB",g="cmocka",h="Valgrind",f="Flask",C="Flake8",E="Black",w="pytest",B="ESLint",y="Node.js",b="JUnit",v="JaCoCo",x="webpack",k="Babel",j="AWS",I="Lambda",S="API Gateway",L="DynamoDB",U="pre-commit",D="Prettier",T="SQLite",P="Stack",Y="Make",M="Poetry",O="Yarn",Z="Maven",V="Travis CI",z="Codecov",q="DigitalOcean",N="NGINX",F="GitHub Actions",R="VS Code";function G(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}var W="active",H="archived",J="retired",_={ci:!0,name:"succ",description:"Compiler for a subset of C",features:["Multi-pass compiler","Growing C support","x86-64 assembly","Robust error handling","Basic type enforcement"],languageList:[e],toolList:[l,A,d,u,m],buildList:[P,V,z],year:"2019",status:W},$={ci:!0,name:"pyfunctory",description:"Pythonic implementations of functional programming concepts",detail:"Map, filter, reduce, and friends built from generator expressions and list comprehensions",languageList:[a],toolList:[w,C,E],buildList:[M,V,z],year:"2017",status:H},X={ci:!1,name:"sudoku solver",altName:"sudoku-solver.online",description:"Sudoku solver website.",detail:"The solver itself is written in C, and then compiled to webassembly",languageList:[i,r,o,s],toolList:["WebAssembly"],buildList:["Emscripten"],year:"2018",status:J},Q={ci:!1,name:"headlinewords.top",description:"Site tracking words used in news headlines.",detail:"Daily, weekly, and monthly trends from a range of sources, across multiple countries",languageList:[a,"SQL",o,s],toolList:[f,"Jinja2",T],buildList:["pip",q,N],year:"2017",status:J},K={ci:!1,name:"piptube",description:"Picture-in-picture wrapper for mpv and youtube-dl",features:["Video and audio","Play video URL","Play search result","Command line jukebox","Config file settings"],languageList:[a],toolList:["youtube-dl","mpv"],buildList:[M],year:"2017",status:H},nn={ci:!0,name:"self.site",ghAction:"deploy",altName:"jgthomas.github.io",description:"Portfolio website",detail:"Responsive site with just the bare-bones tech of the web",languageList:[r,o,s],toolList:["Grid","Flexbox","media queries","{{ mustache }}",B,D],buildList:[O,x,k,F,"GitHub Pages"],year:"2019",status:W},en={ci:!0,name:"calcasm",description:"Command line calculator written in x86-64 assembly",detail:"All input, output, parsing, and calculation performed in pure assembly, with Linux syscalls",languageList:["x86-64 Assembly"],toolList:["as","ld",p],buildList:[Y,V],year:"2018",status:H},tn={ci:!0,name:"draughts",altName:"DraughtsGame",description:"Desktop draughts application",features:["Computer player","Save and resume","Graphical mode","Text mode","Swap bewteen modes"],languageList:[c,"SQL"],toolList:["JavaFX",b,T],buildList:[Z,V],year:"2018",status:H},an={ci:!0,name:"braingame.xyz",description:"Brain game website",detail:"Anagrams, word games, sudoku, and more to come",languageList:[a,r,o,s],toolList:["FastAPI","React","Docker",w,C,E,B,D,U],buildList:[M,O,V,z,"Docker Hub","AWS Elastic Beanstalk"],year:"2020",status:W},rn={ci:!0,name:"emulator",altName:"chipset_emulator",description:"Emulator for 4- and 8-bit chipsets",features:["Interactive shell","Run program from file","Custom assembly","Simple assembler","Step-through debugger"],languageList:[i],toolList:[g,p,h],buildList:[Y,V],year:"2018",status:H},on={ci:!0,ghAction:"tests",name:"jsoner",description:"JSON Validator",detail:"Built with ".concat("Megaparsec"),languageList:[e],toolList:[l,A,d,u,m],buildList:[P,F,z],year:"2020",status:W},sn={ci:!0,ghAction:"deploy",name:"foodApi",description:"Serverless backend for food app",features:["Food pantry record","Recipe book","Matches recipes to food","Suggests alternatives","Replacement ingredients"],languageList:[r],toolList:[y,j,I,S,L,B,D],buildList:["npm",F,"Serverless Framework"],year:"2021",status:W},cn={ci:!0,name:"dish",description:"Docker clone",detail:"Container management non-solution",features:["Create new containers","Access and use containers","Manage containers"],languageList:["Go"],toolList:["Go Tooling"],buildList:[Y,V],year:"2019",status:H},ln={ci:!1,name:"playwords.xyz",description:"Word game website",features:["Solve anagrams","Word squares","Scrabble rack"],languageList:[a,r,o,s],toolList:[f],buildList:["pip",q,N],year:"2017",status:J},An=function(n){var e;n.image=(e=n.name,"images/".concat(e.replaceAll(" ","_"),".png")),n.languages=n.languageList.join(", "),n.tools=n.toolList.join(", "),n.build=n.buildList.join(", "),n.midlink=function(n){if(!n.ci)return"";var e=n.altName?n.altName:n.name;return n.ghAction?"https://github.com/jgthomas/".concat(e,"/workflows/").concat(n.ghAction,"/badge.svg"):"https://travis-ci.com/jgthomas/".concat(e,".svg?branch=master")}(n),n.github=function(n){var e=n.altName?n.altName:n.name;return"https://github.com/jgthomas/".concat(e)}(n),n.octocat="https://raw.githubusercontent.com/github/explore/78df643247d429f6cc873026c0622819ad797942/topics/github/github.png"};An(_),An(an),An(nn),An(tn),An(rn),An(en),An(K),An($),An(X),An(Q),An(on),An(sn),An(cn),An(ln);var dn,un=(G(n={},_.name,_),G(n,sn.name,sn),G(n,on.name,on),G(n,nn.name,nn),G(n,cn.name,cn),G(n,tn.name,tn),G(n,en.name,en),G(n,rn.name,rn),G(n,K.name,K),G(n,X.name,X),G(n,ln.name,ln),G(n,Q.name,Q),n),mn={projects:Object.keys(un).map((function(n){return un[n]}))},pn={siteTitle:"The Late Developer",homePage:"index.html",homeTitle:"Projects",mePage:"me.html",meTitle:"Me",cvLink:"https://www.dropbox.com/s/p7sr20jl648jv1k/CV.pdf?dl=0",cvTitle:"CV"};function gn(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}var hn,fn="36px",Cn="images",En={organisation:"Self-teaching",alt:"Self-teaching",width:fn,image:"".concat(Cn,"/laptop_man.png"),startDate:"2017",endDate:"forever",role:"Projects, Project, Projects!"},wn={organisation:"City of Edinburgh Council",alt:"Edinbrugh Council",width:fn,image:"".concat(Cn,"/edinburgh_council.jpg"),startDate:"2017",endDate:"2018",role:"Database and VBA refactor"},Bn={organisation:"University of Birmingham",alt:"UoB",width:fn,image:"".concat(Cn,"/smallBham.png"),startDate:"2018",endDate:"2019",role:"MSc in Computer Science"},yn={organisation:"codebar.io",alt:"codebar",width:fn,image:"".concat(Cn,"/codebar.png"),startDate:"2019",endDate:"2020",role:"Programming Coach"},bn={organisation:"Bluetel",alt:"Bluetel",width:fn,image:"".concat(Cn,"/bluetel_solutions.png"),startDate:"2019",endDate:"present",role:"Software Engineer"},vn=(gn(dn={},bn.organisation,bn),gn(dn,yn.organisation,yn),gn(dn,Bn.organisation,Bn),gn(dn,wn.organisation,wn),gn(dn,En.organisation,En),dn),xn={experience:Object.keys(vn).map((function(n){return vn[n]}))};function kn(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}var jn="36px",In="https://raw.githubusercontent.com/devicons/devicon/master/icons",Sn={name:a,images:[{alt:a,width:jn,icon:"".concat(In,"/python/python-original.svg")}],text:"My first language! I started using <strong>".concat(a,"</strong> during my PhD, running multi-agent evolutionary simulations. This might sound impressive, but\n  looking back at that code now, I can tell you it is <em>not</em>. Still, there's something about the beauty of well-written Python code, it can flow\n  almost like sentences in a natural language. Also, is there anything that <em>isn't</em> in the standard library? Just wish it was statically typed,\n  once I had a taste of that, its been hard to go back."),tooling:[M,w,E,C,U,R]},Ln={name:i,images:[{alt:i,width:jn,icon:"".concat(In,"/c/c-original.svg")}],text:"I tried to learn algorithms and data structures in Python, but Python just does too much for you. What was the point of this 'linked list',\n  if the Python list was right there? So I switched to <strong>".concat(i,"</strong>, which forced me to grapple with pointers and manual memory management, and to\n  implement things myself that are just part of the standard libraries of other languages. I don't expect I'll ever work in C, but\n  using it has deeply enriched my understanding of other languages and programming in general."),tooling:["GCC",p,h,g,Y,"Vim"]},Un={name:"web",images:[{alt:s,width:jn,icon:"".concat(In,"/html5/html5-original.svg")},{alt:o,width:jn,icon:"".concat(In,"/css3/css3-original.svg")},{alt:r,width:jn,icon:"".concat(In,"/javascript/javascript-original.svg")}],text:"In addition to allowing me to make things other people can <em>see</em>, working with\n  <strong>web</strong> tech really opened up 'API thinking' for me, as a complement to the 'algorithmic thinking' of much of my previous explorations.\n  In doing so, it taught me that it was not 'cheating' if I didn't write it all myself, and that enormously powerful things can be created\n  by making smart use existing tools and services, linked and chained together.",tooling:[O,B,D,x,k,R]},Dn={name:c,images:[{alt:c,width:jn,icon:"".concat(In,"/java/java-original.svg")}],text:"The major language of my computer science degree. It still feels slightly absurd that <em>everything</em> has to be a class, and do I really\n  need all that for 'Hello, World!'? But it was this verbose rigidity that really helped drill object-oriented thinking into my brain. More than\n  any other language, <strong>".concat(c,"</strong> made me think consciously about how to create and expose abstractions.\n  Grasping the beauty and power of interfaces was also a pivotal moment in my developement, so I forgive the verbosity in full."),tooling:[Z,b,v,"IntelliJ"]},Tn={name:e,images:[{alt:e,width:jn,icon:"".concat(In,"/haskell/haskell-original.svg")}],text:"Learning <strong>".concat(e,"</strong> opened up the entire mental landscape of functional programming for me.\n  It is also the language in which I've written my most significant project to date. Don't really do 'favourites', but if I did, Haskell would be my favourite language.\n  The type system is amazing. Sum types and pattern matching are beautiful&#8212;as is the ability to control how much 'power' a function has, from a simple pure function,\n  to selecting from the hierarchy of functor, applicative, and <strike>burrito</strike> monad."),tooling:[P,l,A,d,m,"Vim"]},Pn=function(n){n.tools=n.tooling.join(", ")};Pn(Sn),Pn(Ln),Pn(Un),Pn(Dn),Pn(Tn);var Yn=(kn(hn={},Sn.name,Sn),kn(hn,Ln.name,Ln),kn(hn,Un.name,Un),kn(hn,Dn.name,Dn),kn(hn,Tn.name,Tn),hn),Mn={languages:Object.keys(Yn).map((function(n){return Yn[n]}))},On=t(466),Zn=t.n(On),Vn=function(n,e,t){fetch("".concat("./templates","/").concat(n).concat(".mst")).then((function(n){return n.text()})).then((function(n){var i=Zn().render(n,e);document.getElementById(t).innerHTML=i})).catch((function(e){return console.log("Unable to load template: ".concat(n,". Error: ").concat(e.message))}))};function zn(n,e){var t;if("undefined"==typeof Symbol||null==n[Symbol.iterator]){if(Array.isArray(n)||(t=function(n,e){if(n){if("string"==typeof n)return qn(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?qn(n,e):void 0}}(n))||e&&n&&"number"==typeof n.length){t&&(n=t);var i=0,a=function(){};return{s:a,n:function(){return i>=n.length?{done:!0}:{done:!1,value:n[i++]}},e:function(n){throw n},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,o=!0,s=!1;return{s:function(){t=n[Symbol.iterator]()},n:function(){var n=t.next();return o=n.done,n},e:function(n){s=!0,r=n},f:function(){try{o||null==t.return||t.return()}finally{if(s)throw r}}}}function qn(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,i=new Array(e);t<e;t++)i[t]=n[t];return i}document.addEventListener("DOMContentLoaded",(function(){document.getElementById("project-page")&&(Vn("header",pn,"site-header"),Vn("project",mn,"all-projects")),document.getElementById("me-page")&&(Vn("header",pn,"site-header"),Vn("experience",xn,"experience"),Vn("language",Mn,"languages"))}));var Nn=function(n){n.classList.remove("hidden")},Fn=function(n){n.classList.add("hidden")},Rn=function(){var n=document.getElementById("clear-button");Fn(n)},Gn=function(){var n=document.getElementById("clear-button");Nn(n)},Wn=function(){var n,e=zn(document.getElementsByClassName("project"));try{for(e.s();!(n=e.n()).done;){var t=n.value;Nn(t)}}catch(n){e.e(n)}finally{e.f()}};document.addEventListener("DOMContentLoaded",(function(){if(document.getElementById("project-page")){document.getElementById("search-form").addEventListener("submit",(function(n){n.preventDefault(),n.stopPropagation()}));var n=document.getElementById("search-bar");n.addEventListener("input",(function(){var e=n.value.toLowerCase().trim();e?function(n){return n===W||n===H||n===J}(e)?(Gn(),function(n){var e,t,i=zn(document.getElementsByClassName("project"));try{for(i.s();!(e=i.n()).done;){var a=e.value;t=a.id,un[t].status===n?Nn(a):Fn(a)}}catch(n){i.e(n)}finally{i.f()}}(e)):(Gn(),function(n){var e,t,i,a,r,o=zn(document.getElementsByClassName("project"));try{for(o.s();!(e=o.n()).done;){var s=e.value;(t=s.id,i=void 0,a=void 0,r=void 0,i=un[t],a=i.detail?i.detail:"",r=i.features?i.features.join(", "):"","".concat(i.name,"\n            ").concat(i.description,"\n            ").concat(a,"\n            ").concat(r,"\n            ").concat(i.languages,"\n            ").concat(i.tools,"\n            ").concat(i.build,"\n            ").concat(i.year,"\n            ").concat(i.status,"\n           ").toLowerCase()).indexOf(n)>-1?Nn(s):Fn(s)}}catch(n){o.e(n)}finally{o.f()}}(e)):(Wn(),Rn())})),document.getElementById("clear-button").addEventListener("click",(function(){Wn(),Rn()}))}}));var Hn=t(379),Jn=t.n(Hn),_n=t(424);Jn()(_n.Z,{insert:"head",singleton:!1}),_n.Z.locals,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,