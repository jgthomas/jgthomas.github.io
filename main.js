/*! For license information please see main.js.LICENSE.txt */
(()=>{var n={44:(n,e,t)=>{"use strict";t.d(e,{Z:()=>s});var a=t(15),i=t.n(a),r=t(645),o=t.n(r)()(i());o.push([n.id,'html,body{margin:0;padding:0;font-size:16px;font-family:"Chivo",sans-serif;font-family:"Source Sans Pro",sans-serif;background-color:#6495ed}.full-width{width:65%;margin:auto;margin-top:0;background-color:#f5f5f5;border-radius:0 0 2% 2%;padding:1%;margin-bottom:2%;font-weight:400}nav{text-align:center;margin-top:2em}nav a{text-decoration:none;outline:none;color:dimgray;padding:1%}.key-grid{display:grid;grid-template-columns:1fr;grid-template-rows:1fr;grid-column-gap:1%;align-items:center;justify-items:center;justify-content:space-evenly;text-align:center;margin-top:1em}.hidden{position:absolute;overflow:hidden;clip:rect(0 0 0 0);height:1px;width:1px;margin:-1px;padding:0;border:0}.heading{text-align:center;font-weight:400;margin-bottom:0;color:#1e90ff}.profile-text{color:dimgray;min-width:80%;max-width:80%;margin:auto;text-align:left}@media only screen and (min-width: 2300px){.full-width{width:45%}.profile-text{min-width:60%;max-width:60%}}@media only screen and (min-width: 1281px){.profile-text{min-width:60%;max-width:60%}}@media only screen and (min-width: 1025px)and (max-width: 1280px){.full-width{width:90%}.profile-text{min-width:60%;max-width:60%}}@media only screen and (min-width: 768px)and (max-width: 1024px){.full-width{width:75%}}@media only screen and (min-width: 768px)and (max-width: 1024px)and (orientation: landscape){.full-width{width:90%}}@media only screen and (min-width: 481px)and (max-width: 767px){.full-width{width:95%}}@media only screen and (min-width: 320px)and (max-width: 480px){.full-width{width:95%}}@media only screen and (min-width: 320px)and (max-width: 401px){.full-width{width:90%}}nav a:hover{color:#1e90ff}',"",{version:3,sources:["webpack://./src/scss/index.scss","webpack://./src/scss/_variables.scss","webpack://./src/scss/_layouts.scss"],names:[],mappings:"AAGA,UAEE,QAAA,CACA,SAAA,CACA,cAAA,CACA,8BAAA,CACA,wCAAA,CACA,wBCVsB,CDaxB,YACE,SAAA,CACA,WAAA,CACA,YAAA,CACA,wBChBqB,CDiBrB,uBAAA,CACA,UAAA,CACA,gBAAA,CACA,eAAA,CAGF,IACE,iBAAA,CACA,cAAA,CAEA,MACE,oBAAA,CACA,YAAA,CACA,aC5BkB,CD6BlB,UAAA,CAIJ,UACE,YAAA,CACA,yBAAA,CACA,sBAAA,CACA,kBAAA,CACA,kBAAA,CACA,oBAAA,CACA,4BAAA,CACA,iBAAA,CACA,cAAA,CAGF,QACE,iBAAA,CACA,eAAA,CACA,kBAAA,CACA,UAAA,CACA,SAAA,CACA,WAAA,CACA,SAAA,CACA,QAAA,CAGF,SACE,iBAAA,CACA,eAAA,CACA,eAAA,CACA,aC7Dc,CDgEhB,cACE,aChEoB,CDiEpB,aAAA,CACA,aAAA,CACA,WAAA,CACA,eAAA,CErEE,2CFyEF,YACE,SAAA,CAEF,cACE,aAAA,CACA,aAAA,CAAA,CExEA,2CF6EF,cACE,aAAA,CACA,aAAA,CAAA,CEzEA,kEF8EF,YACE,SAAA,CAEF,cACE,aAAA,CACA,aAAA,CAAA,CE7EA,iEFkFF,YACE,SAAA,CAAA,CE7EA,6FFkFF,YACE,SAAA,CAAA,CE7EA,gEFkFF,YACE,SAAA,CAAA,CE7EA,gEFkFF,YACE,SAAA,CAAA,CE7EA,gEFkFF,YACE,SAAA,CAAA,CAMA,YACE,aCpIU",sourcesContent:["@use 'variables';\n@import 'layouts';\n\nhtml,\nbody {\n  margin: 0;\n  padding: 0;\n  font-size: 16px;\n  font-family: 'Chivo', sans-serif;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: variables.$page-background-color;\n}\n\n.full-width {\n  width: 65%;\n  margin: auto;\n  margin-top: 0;\n  background-color: variables.$box-background-color;\n  border-radius: 0 0 2% 2%;\n  padding: 1%;\n  margin-bottom: 2%;\n  font-weight: 400;\n}\n\nnav {\n  text-align: center;\n  margin-top: 2em;\n\n  a {\n    text-decoration: none;\n    outline: none;\n    color: variables.$standard-text-color;\n    padding: 1%;\n  }\n}\n\n.key-grid {\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr;\n  grid-column-gap: 1%;\n  align-items: center;\n  justify-items: center;\n  justify-content: space-evenly;\n  text-align: center;\n  margin-top: 1em;\n}\n\n.hidden {\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n}\n\n.heading {\n  text-align: center;\n  font-weight: 400;\n  margin-bottom: 0;\n  color: variables.$heading-color;\n}\n\n.profile-text {\n  color: variables.$standard-text-color;\n  min-width: 80%;\n  max-width: 80%;\n  margin: auto;\n  text-align: left;\n}\n\n@include respond(widescreen) {\n  .full-width {\n    width: 45%;\n  }\n  .profile-text {\n    min-width: 60%;\n    max-width: 60%;\n  }\n}\n\n@include respond(desktop) {\n  .profile-text {\n    min-width: 60%;\n    max-width: 60%;\n  }\n}\n\n@include respond(laptop) {\n  .full-width {\n    width: 90%;\n  }\n  .profile-text {\n    min-width: 60%;\n    max-width: 60%;\n  }\n}\n\n@include respond(tablet) {\n  .full-width {\n    width: 75%;\n  }\n}\n\n@include respond(tabletLandscape) {\n  .full-width {\n    width: 90%;\n  }\n}\n\n@include respond(mobileLarge) {\n  .full-width {\n    width: 95%;\n  }\n}\n\n@include respond(mobileSmall) {\n  .full-width {\n    width: 95%;\n  }\n}\n\n@include respond(mobileTiny) {\n  .full-width {\n    width: 90%;\n  }\n}\n\n@include feature(hover) {\n  nav {\n    a:hover {\n      color: variables.$heading-color;\n    }\n  }\n}\n","$page-background-color: cornflowerblue;\n$box-background-color: whitesmoke;\n$heading-color: dodgerblue;\n$standard-text-color: dimgrey;\n$standard-text-color-dark: darkslategrey;\n$highlight-text-color: cornflowerblue;\n","@mixin respond($breakpoint) {\n  @if $breakpoint==widescreen {\n    @media only screen and (min-width: 2300px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==desktop {\n    @media only screen and (min-width: 1281px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==laptop {\n    @media only screen and (min-width: 1025px) and (max-width: 1280px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==tablet {\n    @media only screen and (min-width: 768px) and (max-width: 1024px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==tabletLandscape {\n    @media only screen and (min-width: 768px) and (max-width: 1024px) and (orientation: landscape) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==mobileLarge {\n    @media only screen and (min-width: 481px) and (max-width: 767px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==mobileSmall {\n    @media only screen and (min-width: 320px) and (max-width: 480px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==mobileTiny {\n    @media only screen and (min-width: 320px) and (max-width: 401px) {\n      @content;\n    }\n  }\n}\n\n@mixin feature($feature) {\n  @if $feature==hover {\n    @content;\n  }\n}\n"],sourceRoot:""}]);const s=o},324:(n,e,t)=>{"use strict";t.d(e,{Z:()=>s});var a=t(15),i=t.n(a),r=t(645),o=t.n(r)()(i());o.push([n.id,".main-grid-me{margin-top:1em;display:grid;grid-template-columns:1fr;grid-template-rows:1fr;grid-row-gap:1%}.lang-intro{margin-bottom:3em}.lang{margin-bottom:2.5em}.language-name{color:tomato}.tool-icon-list{text-align:center}.tool-icon{display:inline-block;margin-left:auto;margin-right:auto}.me-links{display:flex;flex-direction:row;justify-content:space-around}.tooling-title{color:#6495ed}","",{version:3,sources:["webpack://./src/scss/me.scss","webpack://./src/scss/_variables.scss"],names:[],mappings:"AAIA,cACE,cAAA,CACA,YAAA,CACA,yBAAA,CACA,sBAAA,CACA,eAAA,CAGF,YACE,iBAAA,CAGF,MACE,mBAAA,CAGF,eACE,YAnBoB,CAsBtB,gBACE,iBAAA,CAGF,WACE,oBAAA,CACA,gBAAA,CACA,iBAAA,CAGF,UACE,YAAA,CACA,kBAAA,CACA,4BAAA,CAGF,eACE,aCpCqB",sourcesContent:["@use 'variables';\n\n$language-text-color: tomato;\n\n.main-grid-me {\n  margin-top: 1em;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr;\n  grid-row-gap: 1%;\n}\n\n.lang-intro {\n  margin-bottom: 3em;\n}\n\n.lang {\n  margin-bottom: 2.5em;\n}\n\n.language-name {\n  color: $language-text-color;\n}\n\n.tool-icon-list {\n  text-align: center;\n}\n\n.tool-icon {\n  display: inline-block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.me-links {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n}\n\n.tooling-title {\n  color: variables.$highlight-text-color;\n}\n","$page-background-color: cornflowerblue;\n$box-background-color: whitesmoke;\n$heading-color: dodgerblue;\n$standard-text-color: dimgrey;\n$standard-text-color-dark: darkslategrey;\n$highlight-text-color: cornflowerblue;\n"],sourceRoot:""}]);const s=o},984:(n,e,t)=>{"use strict";t.d(e,{Z:()=>s});var a=t(15),i=t.n(a),r=t(645),o=t.n(r)()(i());o.push([n.id,'.main-grid-project{margin-top:0em;display:grid;grid-template-columns:1fr;grid-template-rows:1fr;grid-row-gap:1%;grid-template-areas:"projects"}.project-grid{display:grid;grid-area:projects;grid-template-columns:1fr 1fr;grid-column-gap:1%;align-items:center;justify-items:center;justify-content:space-evenly;width:80%;margin:auto;text-align:center;margin-bottom:1em}.key-items{display:flex;flex-direction:row;justify-content:space-around;color:#2f4f4f;text-align:center;width:100%;margin-top:1em}.project{display:grid;grid-template-columns:1fr;background-color:#f5f5f5;border-radius:2%;min-width:95%;max-width:95%;margin-top:20px;align-self:stretch}.title-line{display:flex;flex-direction:row;width:90%;margin:auto;justify-content:space-around;margin-top:20px}.status-light{margin-right:auto;font-size:larger;width:10%}.project-title{font-size:150%;margin-right:auto;margin-left:auto;color:#1e90ff}.description{color:dimgray;width:80%;font-size:larger;margin:auto}.detail{font-size:90%}.tech-used{color:dimgray;width:70%;margin:auto;text-align:left;font-size:100%;font-weight:400}.status-line{align-self:end;color:#2f4f4f;font-size:large;margin-top:20px;display:flex;flex-direction:row;justify-content:space-around}.link-image{width:26px}.uses-title{color:#6495ed}.feature-list{width:50%;margin:auto;text-align:left;font-size:90%}.project-image{max-width:50%;height:auto;padding:20px;margin:auto}.active{color:#2dc937}.archived{color:#e7b416}.retired{color:#a9a9a9}@media only screen and (min-width: 2300px){.project-grid{min-width:50%;max-width:50%}}@media only screen and (min-width: 1025px)and (max-width: 1280px){.project-grid{min-width:95%;max-width:95%}}@media only screen and (min-width: 768px)and (max-width: 1024px){.project-grid{min-width:95%;max-width:95%;grid-template-columns:1fr}.project{min-width:80%;max-width:80%}}@media only screen and (min-width: 768px)and (max-width: 1024px)and (orientation: landscape){.project-grid{min-width:95%;max-width:95%;grid-template-columns:1fr}.feature-list{width:80%}}@media only screen and (min-width: 481px)and (max-width: 767px){.project-grid{min-width:100%;max-width:100%;grid-template-columns:1fr}.project{min-width:95%;max-width:95%}.feature-list{width:70%}}@media only screen and (min-width: 320px)and (max-width: 480px){.project-grid{min-width:100%;max-width:100%;grid-template-columns:1fr}.project{min-width:95%;max-width:95%}.feature-list{width:70%}}@media only screen and (min-width: 320px)and (max-width: 401px){.project-grid{min-width:100%;max-width:100%;grid-template-columns:1fr}.project{min-width:90%;max-width:90%}.feature-list{width:80%}}',"",{version:3,sources:["webpack://./src/scss/projects.scss","webpack://./src/scss/_variables.scss","webpack://./src/scss/_layouts.scss"],names:[],mappings:"AAOA,mBACE,cAAA,CACA,YAAA,CACA,yBAAA,CACA,sBAAA,CACA,eAAA,CACA,8BAAA,CAGF,cACE,YAAA,CACA,kBAAA,CACA,6BAAA,CACA,kBAAA,CACA,kBAAA,CACA,oBAAA,CACA,4BAAA,CACA,SAAA,CACA,WAAA,CACA,iBAAA,CACA,iBAAA,CAGF,WACE,YAAA,CACA,kBAAA,CACA,4BAAA,CACA,aAAA,CACA,iBAAA,CACA,UAAA,CACA,cAAA,CAGF,SACE,YAAA,CACA,yBAAA,CACA,wBC1CqB,CD2CrB,gBAAA,CACA,aAAA,CACA,aAAA,CACA,eAAA,CACA,kBAAA,CAGF,YACE,YAAA,CACA,kBAAA,CACA,SAAA,CACA,WAAA,CACA,4BAAA,CACA,eAAA,CAGF,cACE,iBAAA,CACA,gBAAA,CACA,SAAA,CAGF,eACE,cAAA,CACA,iBAAA,CACA,gBAAA,CACA,aCpEc,CDuEhB,aACE,aCvEoB,CDwEpB,SAAA,CACA,gBAAA,CACA,WAAA,CAGF,QACE,aAAA,CAGF,WACE,aClFoB,CDmFpB,SAAA,CACA,WAAA,CACA,eAAA,CACA,cAAA,CACA,eAAA,CAGF,aACE,cAAA,CACA,aC3FyB,CD4FzB,eAAA,CACA,eAAA,CACA,YAAA,CACA,kBAAA,CACA,4BAAA,CAGF,YACE,UAAA,CAGF,YACE,aCvGqB,CD0GvB,cACE,SAAA,CACA,WAAA,CACA,eAAA,CACA,aAAA,CAGF,eACE,aAAA,CACA,WAAA,CACA,YAAA,CACA,WAAA,CAGF,QACE,aA3Ha,CA8Hf,UACE,aA9He,CAiIjB,SACE,aAjIc,CEHZ,2CFwIF,cACE,aAAA,CACA,aAAA,CAAA,CE9HA,kEFmIF,cACE,aAAA,CACA,aAAA,CAAA,CE/HA,iEFoIF,cACE,aAAA,CACA,aAAA,CACA,yBAAA,CAEF,SACE,aAAA,CACA,aAAA,CAAA,CErIA,6FF0IF,cACE,aAAA,CACA,aAAA,CACA,yBAAA,CAEF,cACE,SAAA,CAAA,CE1IA,gEF+IF,cACE,cAAA,CACA,cAAA,CACA,yBAAA,CAEF,SACE,aAAA,CACA,aAAA,CAEF,cACE,SAAA,CAAA,CEnJA,gEFwJF,cACE,cAAA,CACA,cAAA,CACA,yBAAA,CAEF,SACE,aAAA,CACA,aAAA,CAEF,cACE,SAAA,CAAA,CE5JA,gEFiKF,cACE,cAAA,CACA,cAAA,CACA,yBAAA,CAEF,SACE,aAAA,CACA,aAAA,CAEF,cACE,SAAA,CAAA",sourcesContent:["@use 'variables';\n@import 'layouts';\n\n$active-color: #2dc937;\n$archived-color: #e7b416;\n$retired-color: darkgray;\n\n.main-grid-project {\n  margin-top: 0em;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr;\n  grid-row-gap: 1%;\n  grid-template-areas: 'projects';\n}\n\n.project-grid {\n  display: grid;\n  grid-area: projects;\n  grid-template-columns: 1fr 1fr;\n  grid-column-gap: 1%;\n  align-items: center;\n  justify-items: center;\n  justify-content: space-evenly;\n  width: 80%;\n  margin: auto;\n  text-align: center;\n  margin-bottom: 1em;\n}\n\n.key-items {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  color: darkslategrey;\n  text-align: center;\n  width: 100%;\n  margin-top: 1em;\n}\n\n.project {\n  display: grid;\n  grid-template-columns: 1fr;\n  background-color: variables.$box-background-color;\n  border-radius: 2%;\n  min-width: 95%;\n  max-width: 95%;\n  margin-top: 20px;\n  align-self: stretch;\n}\n\n.title-line {\n  display: flex;\n  flex-direction: row;\n  width: 90%;\n  margin: auto;\n  justify-content: space-around;\n  margin-top: 20px;\n}\n\n.status-light {\n  margin-right: auto;\n  font-size: larger;\n  width: 10%;\n}\n\n.project-title {\n  font-size: 150%;\n  margin-right: auto;\n  margin-left: auto;\n  color: variables.$heading-color;\n}\n\n.description {\n  color: variables.$standard-text-color;\n  width: 80%;\n  font-size: larger;\n  margin: auto;\n}\n\n.detail {\n  font-size: 90%;\n}\n\n.tech-used {\n  color: variables.$standard-text-color;\n  width: 70%;\n  margin: auto;\n  text-align: left;\n  font-size: 100%;\n  font-weight: 400;\n}\n\n.status-line {\n  align-self: end;\n  color: variables.$standard-text-color-dark;\n  font-size: large;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n}\n\n.link-image {\n  width: 26px;\n}\n\n.uses-title {\n  color: variables.$highlight-text-color;\n}\n\n.feature-list {\n  width: 50%;\n  margin: auto;\n  text-align: left;\n  font-size: 90%;\n}\n\n.project-image {\n  max-width: 50%;\n  height: auto;\n  padding: 20px;\n  margin: auto;\n}\n\n.active {\n  color: $active-color;\n}\n\n.archived {\n  color: $archived-color;\n}\n\n.retired {\n  color: $retired-color;\n}\n\n@include respond(widescreen) {\n  .project-grid {\n    min-width: 50%;\n    max-width: 50%;\n  }\n}\n\n@include respond(laptop) {\n  .project-grid {\n    min-width: 95%;\n    max-width: 95%;\n  }\n}\n\n@include respond(tablet) {\n  .project-grid {\n    min-width: 95%;\n    max-width: 95%;\n    grid-template-columns: 1fr;\n  }\n  .project {\n    min-width: 80%;\n    max-width: 80%;\n  }\n}\n\n@include respond(tabletLandscape) {\n  .project-grid {\n    min-width: 95%;\n    max-width: 95%;\n    grid-template-columns: 1fr;\n  }\n  .feature-list {\n    width: 80%;\n  }\n}\n\n@include respond(mobileLarge) {\n  .project-grid {\n    min-width: 100%;\n    max-width: 100%;\n    grid-template-columns: 1fr;\n  }\n  .project {\n    min-width: 95%;\n    max-width: 95%;\n  }\n  .feature-list {\n    width: 70%;\n  }\n}\n\n@include respond(mobileSmall) {\n  .project-grid {\n    min-width: 100%;\n    max-width: 100%;\n    grid-template-columns: 1fr;\n  }\n  .project {\n    min-width: 95%;\n    max-width: 95%;\n  }\n  .feature-list {\n    width: 70%;\n  }\n}\n\n@include respond(mobileTiny) {\n  .project-grid {\n    min-width: 100%;\n    max-width: 100%;\n    grid-template-columns: 1fr;\n  }\n  .project {\n    min-width: 90%;\n    max-width: 90%;\n  }\n  .feature-list {\n    width: 80%;\n  }\n}\n","$page-background-color: cornflowerblue;\n$box-background-color: whitesmoke;\n$heading-color: dodgerblue;\n$standard-text-color: dimgrey;\n$standard-text-color-dark: darkslategrey;\n$highlight-text-color: cornflowerblue;\n","@mixin respond($breakpoint) {\n  @if $breakpoint==widescreen {\n    @media only screen and (min-width: 2300px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==desktop {\n    @media only screen and (min-width: 1281px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==laptop {\n    @media only screen and (min-width: 1025px) and (max-width: 1280px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==tablet {\n    @media only screen and (min-width: 768px) and (max-width: 1024px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==tabletLandscape {\n    @media only screen and (min-width: 768px) and (max-width: 1024px) and (orientation: landscape) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==mobileLarge {\n    @media only screen and (min-width: 481px) and (max-width: 767px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==mobileSmall {\n    @media only screen and (min-width: 320px) and (max-width: 480px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==mobileTiny {\n    @media only screen and (min-width: 320px) and (max-width: 401px) {\n      @content;\n    }\n  }\n}\n\n@mixin feature($feature) {\n  @if $feature==hover {\n    @content;\n  }\n}\n"],sourceRoot:""}]);const s=o},673:(n,e,t)=>{"use strict";t.d(e,{Z:()=>s});var a=t(15),i=t.n(a),r=t(645),o=t.n(r)()(i());o.push([n.id,".search-form{display:flex;flex-direction:column;align-content:space-around;width:90%;height:auto;margin:auto;text-align:center}#search-bar{width:50%;padding:20px;font-size:1.15em;margin:auto;display:block;margin-bottom:1.15em;color:#6495ed;border-radius:2%;border:none;text-decoration:none}.clear-button{text-decoration:none;padding:5px;font-size:large;border:none;color:tomato;background-color:#f5f5f5;-webkit-appearance:none;border-radius:5px;margin:auto}@media only screen and (min-width: 320px)and (max-width: 480px){#search-bar{width:75%;margin-top:1em}}@media only screen and (min-width: 320px)and (max-width: 401px){#search-bar{width:75%;margin-top:1em}}","",{version:3,sources:["webpack://./src/scss/search.scss","webpack://./src/scss/_variables.scss","webpack://./src/scss/_layouts.scss"],names:[],mappings:"AAKA,aACE,YAAA,CACA,qBAAA,CACA,0BAAA,CACA,SAAA,CACA,WAAA,CACA,WAAA,CACA,iBAAA,CAGF,YACE,SAAA,CACA,YAAA,CACA,gBAAA,CACA,WAAA,CACA,aAAA,CACA,oBAAA,CACA,aCjBqB,CDkBrB,gBAAA,CACA,WAAA,CACA,oBAAA,CAGF,cACE,oBAAA,CACA,WAAA,CACA,eAAA,CACA,WAAA,CACA,YA9BiB,CA+BjB,wBCjCqB,CDkCrB,uBAAA,CACA,iBAAA,CACA,WAAA,CECE,gEFGF,YACE,SAAA,CACA,cAAA,CAAA,CECA,gEFIF,YACE,SAAA,CACA,cAAA,CAAA",sourcesContent:["@use 'variables';\n@import 'layouts';\n\n$alert-text-color: tomato;\n\n.search-form {\n  display: flex;\n  flex-direction: column;\n  align-content: space-around;\n  width: 90%;\n  height: auto;\n  margin: auto;\n  text-align: center;\n}\n\n#search-bar {\n  width: 50%;\n  padding: 20px;\n  font-size: 1.15em;\n  margin: auto;\n  display: block;\n  margin-bottom: 1.15em;\n  color: variables.$highlight-text-color;\n  border-radius: 2%;\n  border: none;\n  text-decoration: none;\n}\n\n.clear-button {\n  text-decoration: none;\n  padding: 5px;\n  font-size: large;\n  border: none;\n  color: $alert-text-color;\n  background-color: variables.$box-background-color;\n  -webkit-appearance: none;\n  border-radius: 5px;\n  margin: auto;\n}\n\n@include respond(mobileSmall) {\n  #search-bar {\n    width: 75%;\n    margin-top: 1em;\n  }\n}\n\n@include respond(mobileTiny) {\n  #search-bar {\n    width: 75%;\n    margin-top: 1em;\n  }\n}\n","$page-background-color: cornflowerblue;\n$box-background-color: whitesmoke;\n$heading-color: dodgerblue;\n$standard-text-color: dimgrey;\n$standard-text-color-dark: darkslategrey;\n$highlight-text-color: cornflowerblue;\n","@mixin respond($breakpoint) {\n  @if $breakpoint==widescreen {\n    @media only screen and (min-width: 2300px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==desktop {\n    @media only screen and (min-width: 1281px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==laptop {\n    @media only screen and (min-width: 1025px) and (max-width: 1280px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==tablet {\n    @media only screen and (min-width: 768px) and (max-width: 1024px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==tabletLandscape {\n    @media only screen and (min-width: 768px) and (max-width: 1024px) and (orientation: landscape) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==mobileLarge {\n    @media only screen and (min-width: 481px) and (max-width: 767px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==mobileSmall {\n    @media only screen and (min-width: 320px) and (max-width: 480px) {\n      @content;\n    }\n  }\n\n  @if $breakpoint==mobileTiny {\n    @media only screen and (min-width: 320px) and (max-width: 401px) {\n      @content;\n    }\n  }\n}\n\n@mixin feature($feature) {\n  @if $feature==hover {\n    @content;\n  }\n}\n"],sourceRoot:""}]);const s=o},645:n=>{"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,a){"string"==typeof n&&(n=[[null,n,""]]);var i={};if(a)for(var r=0;r<this.length;r++){var o=this[r][0];null!=o&&(i[o]=!0)}for(var s=0;s<n.length;s++){var c=[].concat(n[s]);a&&i[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),e.push(c))}},e}},15:n=>{"use strict";function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,a=new Array(e);t<e;t++)a[t]=n[t];return a}n.exports=function(n){var t,a,i=(a=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(n)){var t=[],a=!0,i=!1,r=void 0;try{for(var o,s=n[Symbol.iterator]();!(a=(o=s.next()).done)&&(t.push(o.value),!e||t.length!==e);a=!0);}catch(n){i=!0,r=n}finally{try{a||null==s.return||s.return()}finally{if(i)throw r}}return t}}(t,a)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var a=Object.prototype.toString.call(n).slice(8,-1);return"Object"===a&&n.constructor&&(a=n.constructor.name),"Map"===a||"Set"===a?Array.from(n):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?e(n,t):void 0}}(t,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=i[1],o=i[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(c," */"),d=o.sources.map((function(n){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(n," */")}));return[r].concat(d).concat([l]).join("\n")}return[r].join("\n")}},466:function(n){n.exports=function(){"use strict";var n=Object.prototype.toString,e=Array.isArray||function(e){return"[object Array]"===n.call(e)};function t(n){return"function"==typeof n}function a(n){return n.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function i(n,e){return null!=n&&"object"==typeof n&&e in n}var r=RegExp.prototype.test;var o=/\S/;function s(n){return!function(n,e){return r.call(n,e)}(o,n)}var c={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"};var l=/\s*/,d=/\s+/,A=/\s*=/,u=/\s*\}/,p=/#|\^|\/|>|\{|&|=|!/;function m(n){this.string=n,this.tail=n,this.pos=0}function g(n,e){this.view=n,this.cache={".":this.view},this.parent=e}function h(){this.templateCache={_cache:{},set:function(n,e){this._cache[n]=e},get:function(n){return this._cache[n]},clear:function(){this._cache={}}}}m.prototype.eos=function(){return""===this.tail},m.prototype.scan=function(n){var e=this.tail.match(n);if(!e||0!==e.index)return"";var t=e[0];return this.tail=this.tail.substring(t.length),this.pos+=t.length,t},m.prototype.scanUntil=function(n){var e,t=this.tail.search(n);switch(t){case-1:e=this.tail,this.tail="";break;case 0:e="";break;default:e=this.tail.substring(0,t),this.tail=this.tail.substring(t)}return this.pos+=e.length,e},g.prototype.push=function(n){return new g(n,this)},g.prototype.lookup=function(n){var e,a,r,o=this.cache;if(o.hasOwnProperty(n))e=o[n];else{for(var s,c,l,d=this,A=!1;d;){if(n.indexOf(".")>0)for(s=d.view,c=n.split("."),l=0;null!=s&&l<c.length;)l===c.length-1&&(A=i(s,c[l])||(a=s,r=c[l],null!=a&&"object"!=typeof a&&a.hasOwnProperty&&a.hasOwnProperty(r))),s=s[c[l++]];else s=d.view[n],A=i(d.view,n);if(A){e=s;break}d=d.parent}o[n]=e}return t(e)&&(e=e.call(this.view)),e},h.prototype.clearCache=function(){void 0!==this.templateCache&&this.templateCache.clear()},h.prototype.parse=function(n,t){var i=this.templateCache,r=n+":"+(t||f.tags).join(":"),o=void 0!==i,c=o?i.get(r):void 0;return null==c&&(c=function(n,t){if(!n)return[];var i,r,o,c=!1,g=[],h=[],C=[],w=!1,b=!1,y="",x=0;function v(){if(w&&!b)for(;C.length;)delete h[C.pop()];else C=[];w=!1,b=!1}function k(n){if("string"==typeof n&&(n=n.split(d,2)),!e(n)||2!==n.length)throw new Error("Invalid tags: "+n);i=new RegExp(a(n[0])+"\\s*"),r=new RegExp("\\s*"+a(n[1])),o=new RegExp("\\s*"+a("}"+n[1]))}k(t||f.tags);for(var E,B,j,S,F,$,L=new m(n);!L.eos();){if(E=L.pos,j=L.scanUntil(i))for(var I=0,T=j.length;I<T;++I)s(S=j.charAt(I))?(C.push(h.length),y+=S):(b=!0,c=!0,y+=" "),h.push(["text",S,E,E+1]),E+=1,"\n"===S&&(v(),y="",x=0,c=!1);if(!L.scan(i))break;if(w=!0,B=L.scan(p)||"name",L.scan(l),"="===B?(j=L.scanUntil(A),L.scan(A),L.scanUntil(r)):"{"===B?(j=L.scanUntil(o),L.scan(u),L.scanUntil(r),B="&"):j=L.scanUntil(r),!L.scan(r))throw new Error("Unclosed tag at "+L.pos);if(F=">"==B?[B,j,E,L.pos,y,x,c]:[B,j,E,L.pos],x++,h.push(F),"#"===B||"^"===B)g.push(F);else if("/"===B){if(!($=g.pop()))throw new Error('Unopened section "'+j+'" at '+E);if($[1]!==j)throw new Error('Unclosed section "'+$[1]+'" at '+E)}else"name"===B||"{"===B||"&"===B?b=!0:"="===B&&k(j)}if(v(),$=g.pop())throw new Error('Unclosed section "'+$[1]+'" at '+L.pos);return function(n){for(var e,t=[],a=t,i=[],r=0,o=n.length;r<o;++r)switch((e=n[r])[0]){case"#":case"^":a.push(e),i.push(e),a=e[4]=[];break;case"/":i.pop()[5]=e[2],a=i.length>0?i[i.length-1][4]:t;break;default:a.push(e)}return t}(function(n){for(var e,t,a=[],i=0,r=n.length;i<r;++i)(e=n[i])&&("text"===e[0]&&t&&"text"===t[0]?(t[1]+=e[1],t[3]=e[3]):(a.push(e),t=e));return a}(h))}(n,t),o&&i.set(r,c)),c},h.prototype.render=function(n,e,t,a){var i=this.getConfigTags(a),r=this.parse(n,i),o=e instanceof g?e:new g(e,void 0);return this.renderTokens(r,o,t,n,a)},h.prototype.renderTokens=function(n,e,t,a,i){for(var r,o,s,c="",l=0,d=n.length;l<d;++l)s=void 0,"#"===(o=(r=n[l])[0])?s=this.renderSection(r,e,t,a,i):"^"===o?s=this.renderInverted(r,e,t,a,i):">"===o?s=this.renderPartial(r,e,t,i):"&"===o?s=this.unescapedValue(r,e):"name"===o?s=this.escapedValue(r,e,i):"text"===o&&(s=this.rawValue(r)),void 0!==s&&(c+=s);return c},h.prototype.renderSection=function(n,a,i,r,o){var s=this,c="",l=a.lookup(n[1]);if(l){if(e(l))for(var d=0,A=l.length;d<A;++d)c+=this.renderTokens(n[4],a.push(l[d]),i,r,o);else if("object"==typeof l||"string"==typeof l||"number"==typeof l)c+=this.renderTokens(n[4],a.push(l),i,r,o);else if(t(l)){if("string"!=typeof r)throw new Error("Cannot use higher-order sections without the original template");null!=(l=l.call(a.view,r.slice(n[3],n[5]),(function(n){return s.render(n,a,i,o)})))&&(c+=l)}else c+=this.renderTokens(n[4],a,i,r,o);return c}},h.prototype.renderInverted=function(n,t,a,i,r){var o=t.lookup(n[1]);if(!o||e(o)&&0===o.length)return this.renderTokens(n[4],t,a,i,r)},h.prototype.indentPartial=function(n,e,t){for(var a=e.replace(/[^ \t]/g,""),i=n.split("\n"),r=0;r<i.length;r++)i[r].length&&(r>0||!t)&&(i[r]=a+i[r]);return i.join("\n")},h.prototype.renderPartial=function(n,e,a,i){if(a){var r=this.getConfigTags(i),o=t(a)?a(n[1]):a[n[1]];if(null!=o){var s=n[6],c=n[5],l=n[4],d=o;0==c&&l&&(d=this.indentPartial(o,l,s));var A=this.parse(d,r);return this.renderTokens(A,e,a,d,i)}}},h.prototype.unescapedValue=function(n,e){var t=e.lookup(n[1]);if(null!=t)return t},h.prototype.escapedValue=function(n,e,t){var a=this.getConfigEscape(t)||f.escape,i=e.lookup(n[1]);if(null!=i)return"number"==typeof i&&a===f.escape?String(i):a(i)},h.prototype.rawValue=function(n){return n[1]},h.prototype.getConfigTags=function(n){return e(n)?n:n&&"object"==typeof n?n.tags:void 0},h.prototype.getConfigEscape=function(n){return n&&"object"==typeof n&&!e(n)?n.escape:void 0};var f={name:"mustache.js",version:"4.1.0",tags:["{{","}}"],clearCache:void 0,escape:void 0,parse:void 0,render:void 0,Scanner:void 0,Context:void 0,Writer:void 0,set templateCache(n){C.templateCache=n},get templateCache(){return C.templateCache}},C=new h;return f.clearCache=function(){return C.clearCache()},f.parse=function(n,e){return C.parse(n,e)},f.render=function(n,t,a,i){if("string"!=typeof n)throw new TypeError('Invalid template! Template should be a "string" but "'+((e(r=n)?"array":typeof r)+'" was given as the first argument for mustache#render(template, view, partials)'));var r;return C.render(n,t,a,i)},f.escape=function(n){return String(n).replace(/[&<>"'`=\/]/g,(function(n){return c[n]}))},f.Scanner=m,f.Context=g,f.Writer=h,f}()},379:(n,e,t)=>{"use strict";var a,i=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),r=[];function o(n){for(var e=-1,t=0;t<r.length;t++)if(r[t].identifier===n){e=t;break}return e}function s(n,e){for(var t={},a=[],i=0;i<n.length;i++){var s=n[i],c=e.base?s[0]+e.base:s[0],l=t[c]||0,d="".concat(c," ").concat(l);t[c]=l+1;var A=o(d),u={css:s[1],media:s[2],sourceMap:s[3]};-1!==A?(r[A].references++,r[A].updater(u)):r.push({identifier:d,updater:g(u,e),references:1}),a.push(d)}return a}function c(n){var e=document.createElement("style"),a=n.attributes||{};if(void 0===a.nonce){var r=t.nc;r&&(a.nonce=r)}if(Object.keys(a).forEach((function(n){e.setAttribute(n,a[n])})),"function"==typeof n.insert)n.insert(e);else{var o=i(n.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}return e}var l,d=(l=[],function(n,e){return l[n]=e,l.filter(Boolean).join("\n")});function A(n,e,t,a){var i=t?"":a.media?"@media ".concat(a.media," {").concat(a.css,"}"):a.css;if(n.styleSheet)n.styleSheet.cssText=d(e,i);else{var r=document.createTextNode(i),o=n.childNodes;o[e]&&n.removeChild(o[e]),o.length?n.insertBefore(r,o[e]):n.appendChild(r)}}function u(n,e,t){var a=t.css,i=t.media,r=t.sourceMap;if(i?n.setAttribute("media",i):n.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),n.styleSheet)n.styleSheet.cssText=a;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(a))}}var p=null,m=0;function g(n,e){var t,a,i;if(e.singleton){var r=m++;t=p||(p=c(e)),a=A.bind(null,t,r,!1),i=A.bind(null,t,r,!0)}else t=c(e),a=u.bind(null,t,e),i=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return a(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;a(n=e)}else i()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===a&&(a=Boolean(window&&document&&document.all&&!window.atob)),a));var t=s(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var a=0;a<t.length;a++){var i=o(t[a]);r[i].references--}for(var c=s(n,e),l=0;l<t.length;l++){var d=o(t[l]);0===r[d].references&&(r[d].updater(),r.splice(d,1))}t=c}}}}},e={};function t(a){if(e[a])return e[a].exports;var i=e[a]={id:a,exports:{}};return n[a].call(i.exports,i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var a in e)t.o(e,a)&&!t.o(n,a)&&Object.defineProperty(n,a,{enumerable:!0,get:e[a]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var a=e.getElementsByTagName("script");a.length&&(n=a[a.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),(()=>{"use strict";var n,e="Haskell",a="C",i="Python",r="JavaScript",o="CSS",s="HTML",c="Java",l="Hspec",d="Hlint",A="Ormolu",u="weeder",p="ghcid",m="GDB",g="cmocka",h="Valgrind",f="Flask",C="Flake8",w="Black",b="pytest",y="ESLint",x="Node.js",v="JUnit",k="JaCoCo",E="webpack",B="Babel",j="Sass",S="AWS",F="Lambda",$="API Gateway",L="DynamoDB",I="pre-commit",T="Prettier",D="SQLite",G="Stack",P="Make",U="Poetry",Y="Yarn",O="Maven",W="Travis CI",M="Codecov",z="DigitalOcean",N="NGINX",R="GitHub Actions",H="VS Code";function _(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}var V="active",J="archived",Z="retired",q={ci:!0,name:"succ",description:"Compiler for a subset of C",features:["Multi-pass compiler","Growing C support","x86-64 assembly","Robust error handling","Basic type enforcement"],languageList:[e],toolList:[l,d,A,u,p],buildList:[G,W,M],year:"2019",status:V},Q={ci:!0,name:"pyfunctory",description:"Pythonic implementations of functional programming concepts",detail:"Map, filter, reduce, and friends built from generator expressions and list comprehensions",languageList:[i],toolList:[b,C,w],buildList:[U,W,M],year:"2017",status:J},K={ci:!1,name:"sudoku solver",altName:"sudoku-solver.online",description:"Sudoku solver website.",detail:"The solver itself is written in C, and then compiled to webassembly",languageList:[a,r,o,s],toolList:["WebAssembly"],buildList:["Emscripten"],year:"2018",status:Z},X={ci:!1,name:"headlinewords.top",description:"Site tracking words used in news headlines.",detail:"Daily, weekly, and monthly trends from a range of sources, across multiple countries",languageList:[i,"SQL",o,s],toolList:[f,"Jinja2",D],buildList:["pip",z,N],year:"2017",status:Z},nn={ci:!1,name:"piptube",description:"Picture-in-picture wrapper for mpv and youtube-dl",features:["Video and audio","Play video URL","Play search result","Command line jukebox","Config file settings"],languageList:[i],toolList:["youtube-dl","mpv"],buildList:[U],year:"2017",status:J},en={ci:!0,name:"self.site",ghAction:"deploy",altName:"jgthomas.github.io",description:"Portfolio website",detail:"Responsive site with just the bare-bones tech of the web",languageList:[r,o,s],toolList:["Grid","Flexbox","media queries","{{ mustache }}",y,T,j],buildList:[Y,E,B,R,"GitHub Pages"],year:"2019",status:V},tn={ci:!0,name:"calcasm",description:"Command line calculator written in x86-64 assembly",detail:"All input, output, parsing, and calculation performed in pure assembly, with Linux syscalls",languageList:["x86-64 Assembly"],toolList:["as","ld",m],buildList:[P,W],year:"2018",status:J},an={ci:!0,name:"draughts",altName:"DraughtsGame",description:"Desktop draughts application",features:["Computer player","Save and resume","Graphical mode","Text mode","Swap bewteen modes"],languageList:[c,"SQL"],toolList:["JavaFX",v,D],buildList:[O,W],year:"2018",status:J},rn={ci:!0,name:"braingame.xyz",description:"Brain game website",detail:"Anagrams, word games, sudoku, and more to come",languageList:[i,r,o,s],toolList:["FastAPI","React","Docker",b,C,w,y,T,I],buildList:[U,Y,W,M,"Docker Hub","AWS Elastic Beanstalk"],year:"2020",status:V},on={ci:!0,name:"emulator",altName:"chipset_emulator",description:"Emulator for 4- and 8-bit chipsets",features:["Interactive shell","Run program from file","Custom assembly","Simple assembler","Step-through debugger"],languageList:[a],toolList:[g,m,h],buildList:[P,W],year:"2018",status:J},sn={ci:!0,ghAction:"tests",name:"jsoner",description:"JSON Validator",detail:"Built with ".concat("Megaparsec"),languageList:[e],toolList:[l,d,A,u,p],buildList:[G,R,M],year:"2020",status:V},cn={ci:!0,ghAction:"deploy",name:"foodApi",description:"Serverless backend for food app",features:["Food pantry record","Recipe book","Matches recipes to food","Suggests options","Alternate ingredients"],languageList:[r],toolList:[x,S,F,$,L,y,T],buildList:["npm",R,"Serverless Framework"],year:"2021",status:V},ln={ci:!0,name:"dish",description:"Docker clone",detail:"Container management non-solution",features:["Create new containers","Access and use containers","Manage containers"],languageList:["Go"],toolList:["Go Tooling"],buildList:[P,W],year:"2019",status:J},dn={ci:!1,name:"playwords.xyz",description:"Word game website",features:["Solve anagrams","Word squares","Scrabble rack"],languageList:[i,r,o,s],toolList:[f],buildList:["pip",z,N],year:"2017",status:Z},An=function(n){var e;n.image=(e=n.name,"src/img/".concat(e.replaceAll(" ","_"),".png")),n.languages=n.languageList.join(", "),n.tools=n.toolList.join(", "),n.build=n.buildList.join(", "),n.midlink=function(n){if(!n.ci)return"";var e=n.altName?n.altName:n.name;return n.ghAction?"https://github.com/jgthomas/".concat(e,"/workflows/").concat(n.ghAction,"/badge.svg"):"https://travis-ci.com/jgthomas/".concat(e,".svg?branch=master")}(n),n.github=function(n){var e=n.altName?n.altName:n.name;return"https://github.com/jgthomas/".concat(e)}(n),n.octocat="https://raw.githubusercontent.com/github/explore/78df643247d429f6cc873026c0622819ad797942/topics/github/github.png"};An(q),An(rn),An(en),An(an),An(on),An(tn),An(nn),An(Q),An(K),An(X),An(sn),An(cn),An(ln),An(dn);var un,pn=(_(n={},q.name,q),_(n,cn.name,cn),_(n,sn.name,sn),_(n,en.name,en),_(n,ln.name,ln),_(n,an.name,an),_(n,tn.name,tn),_(n,on.name,on),_(n,nn.name,nn),_(n,K.name,K),_(n,dn.name,dn),_(n,X.name,X),n),mn={projects:Object.keys(pn).map((function(n){return pn[n]}))},gn={siteTitle:"The Late Developer",homePage:"index.html",homeTitle:"Projects",mePage:"me.html",meTitle:"Me",cvLink:"https://www.dropbox.com/s/p7sr20jl648jv1k/CV.pdf?dl=0",cvTitle:"CV"};function hn(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}var fn,Cn="36px",wn="src/img",bn={organisation:"Self-teaching",alt:"Self-teaching",width:Cn,image:"".concat(wn,"/laptop_man.png"),startDate:"2017",endDate:"forever",role:"Projects, Project, Projects!"},yn={organisation:"City of Edinburgh Council",alt:"Edinbrugh Council",width:Cn,image:"".concat(wn,"/edinburgh_council.jpg"),startDate:"2017",endDate:"2018",role:"Database and VBA refactor"},xn={organisation:"University of Birmingham",alt:"UoB",width:Cn,image:"".concat(wn,"/smallBham.png"),startDate:"2018",endDate:"2019",role:"MSc in Computer Science"},vn={organisation:"codebar.io",alt:"codebar",width:Cn,image:"".concat(wn,"/codebar.png"),startDate:"2019",endDate:"2020",role:"Programming Coach"},kn={organisation:"Bluetel",alt:"Bluetel",width:Cn,image:"".concat(wn,"/bluetel_solutions.png"),startDate:"2019",endDate:"present",role:"Software Engineer"},En=(hn(un={},kn.organisation,kn),hn(un,vn.organisation,vn),hn(un,xn.organisation,xn),hn(un,yn.organisation,yn),hn(un,bn.organisation,bn),un),Bn={experience:Object.keys(En).map((function(n){return En[n]}))};function jn(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}var Sn="36px",Fn="https://raw.githubusercontent.com/devicons/devicon/master/icons",$n={name:i,images:[{alt:i,width:Sn,icon:"".concat(Fn,"/python/python-original.svg")}],text:'My first language! I started using <span class="language-name">'.concat(i,"</span> during my PhD, running multi-agent evolutionary simulations. This might sound impressive, but\n  looking back at that code now, I can tell you it is <em>not</em>. Still, there's something about the beauty of well-written Python code, it can flow\n  almost like sentences in a natural language. Also, is there anything that <em>isn't</em> in the standard library? Just wish it was statically typed,\n  once I had a taste of that, its been hard to go back."),tooling:[U,b,w,C,I,H]},Ln={name:a,images:[{alt:a,width:Sn,icon:"".concat(Fn,"/c/c-original.svg")}],text:"I tried to learn algorithms and data structures in Python, but Python just does too much for you. What was the point of this 'linked list',\n  if the Python list was right there? So I switched to <span class=\"language-name\">".concat(a,"</span>, which forced me to grapple with pointers and manual memory management, and to\n  implement things myself that are just part of the standard libraries of other languages. I don't expect I'll ever work in C, but\n  using it has deeply enriched my understanding of other languages and programming in general."),tooling:["GCC",m,h,g,P,"Vim"]},In={name:"web",images:[{alt:s,width:Sn,icon:"".concat(Fn,"/html5/html5-original.svg")},{alt:o,width:Sn,icon:"".concat(Fn,"/css3/css3-original.svg")},{alt:r,width:Sn,icon:"".concat(Fn,"/javascript/javascript-original.svg")}],text:'In addition to allowing me to make things other people can <em>see</em>, working with\n  <span class="language-name">'.concat("Web Tech","</span> really opened up 'API thinking' for me, as a complement to the 'algorithmic thinking' of much of my previous explorations.\n  In doing so, it taught me that it was not 'cheating' if I didn't write it all myself, and that enormously powerful things can be created\n  by making smart use existing tools and services, linked and chained together."),tooling:[Y,y,T,E,B,j,H]},Tn={name:c,images:[{alt:c,width:Sn,icon:"".concat(Fn,"/java/java-original.svg")}],text:"The major language of my computer science degree. It still feels slightly absurd that <em>everything</em> has to be a class, and do I really\n  need all that for 'Hello, World!'? But it was this verbose rigidity that really helped drill object-oriented thinking into my brain. More than\n  any other language, <span class=\"language-name\">".concat(c,"</span> made me think consciously about how to create and expose abstractions.\n  Grasping the beauty and power of interfaces was also a pivotal moment in my developement, so I forgive the verbosity in full."),tooling:[O,v,k,"IntelliJ"]},Dn={name:e,images:[{alt:e,width:Sn,icon:"".concat(Fn,"/haskell/haskell-original.svg")}],text:'Learning <span class="language-name">'.concat(e,"</span> opened up the entire mental landscape of functional programming for me.\n  It is also the language in which I've written my most significant project to date. Don't really do 'favourites', but if I did, Haskell would be my favourite language.\n  The type system is amazing. Sum types and pattern matching are beautiful&#8212;as is the ability to control how much 'power' a function has, from a simple pure function,\n  to selecting from the hierarchy of functor, applicative, and <strike>burrito</strike> monad."),tooling:[G,l,d,A,p,"Vim"]},Gn=function(n){n.tools=n.tooling.join(", ")};Gn($n),Gn(Ln),Gn(In),Gn(Tn),Gn(Dn);var Pn=(jn(fn={},$n.name,$n),jn(fn,Ln.name,Ln),jn(fn,In.name,In),jn(fn,Tn.name,Tn),jn(fn,Dn.name,Dn),fn),Un={languages:Object.keys(Pn).map((function(n){return Pn[n]}))},Yn=t(466),On=t.n(Yn),Wn=function(n,e,t){fetch("".concat("./src/templates","/").concat(n).concat(".mst")).then((function(n){return n.text()})).then((function(n){var a=On().render(n,e);document.getElementById(t).innerHTML=a})).catch((function(e){return console.log("Unable to load template: ".concat(n,". Error: ").concat(e.message))}))};function Mn(n,e){var t;if("undefined"==typeof Symbol||null==n[Symbol.iterator]){if(Array.isArray(n)||(t=function(n,e){if(n){if("string"==typeof n)return zn(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?zn(n,e):void 0}}(n))||e&&n&&"number"==typeof n.length){t&&(n=t);var a=0,i=function(){};return{s:i,n:function(){return a>=n.length?{done:!0}:{done:!1,value:n[a++]}},e:function(n){throw n},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,o=!0,s=!1;return{s:function(){t=n[Symbol.iterator]()},n:function(){var n=t.next();return o=n.done,n},e:function(n){s=!0,r=n},f:function(){try{o||null==t.return||t.return()}finally{if(s)throw r}}}}function zn(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,a=new Array(e);t<e;t++)a[t]=n[t];return a}document.addEventListener("DOMContentLoaded",(function(){document.getElementById("project-page")&&(Wn("header",gn,"site-header"),Wn("project",mn,"all-projects")),document.getElementById("me-page")&&(Wn("header",gn,"site-header"),Wn("experience",Bn,"experience"),Wn("language",Un,"languages"))}));var Nn=function(n){n.classList.remove("hidden")},Rn=function(n){n.classList.add("hidden")},Hn=function(){var n=document.getElementById("clear-button");Rn(n)},_n=function(){var n=document.getElementById("clear-button");Nn(n)},Vn=function(){var n,e=Mn(document.getElementsByClassName("project"));try{for(e.s();!(n=e.n()).done;){var t=n.value;Nn(t)}}catch(n){e.e(n)}finally{e.f()}};document.addEventListener("DOMContentLoaded",(function(){if(document.getElementById("project-page")){document.getElementById("search-form").addEventListener("submit",(function(n){n.preventDefault(),n.stopPropagation()}));var n=document.getElementById("search-bar");n.addEventListener("input",(function(){var e=n.value.toLowerCase().trim();e?function(n){return n===V||n===J||n===Z}(e)?(_n(),function(n){var e,t,a=Mn(document.getElementsByClassName("project"));try{for(a.s();!(e=a.n()).done;){var i=e.value;t=i.id,pn[t].status===n?Nn(i):Rn(i)}}catch(n){a.e(n)}finally{a.f()}}(e)):(_n(),function(n){var e,t,a,i,r,o=Mn(document.getElementsByClassName("project"));try{for(o.s();!(e=o.n()).done;){var s=e.value;(t=s.id,a=void 0,i=void 0,r=void 0,a=pn[t],i=a.detail?a.detail:"",r=a.features?a.features.join(", "):"","".concat(a.name,"\n            ").concat(a.description,"\n            ").concat(i,"\n            ").concat(r,"\n            ").concat(a.languages,"\n            ").concat(a.tools,"\n            ").concat(a.build,"\n            ").concat(a.year,"\n            ").concat(a.status,"\n           ").toLowerCase()).indexOf(n)>-1?Nn(s):Rn(s)}}catch(n){o.e(n)}finally{o.f()}}(e)):(Vn(),Hn())})),document.getElementById("clear-button").addEventListener("click",(function(){Vn(),Hn()}))}}));var Jn=t(379),Zn=t.n(Jn),qn=t(44);Zn()(qn.Z,{insert:"head",singleton:!1}),qn.Z.locals;var Qn=t(984);Zn()(Qn.Z,{insert:"head",singleton:!1}),Qn.Z.locals;var Kn=t(673);Zn()(Kn.Z,{insert:"head",singleton:!1}),Kn.Z.locals;var Xn=t(324);Zn()(Xn.Z,{insert:"head",singleton:!1}),Xn.Z.locals,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p,t.p})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,